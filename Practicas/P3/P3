{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Práctica 3: Mongo"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "# ! pip install pymongo"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "# ! pip install folium"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "# !pip install gmaps"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pymongo\n",
    "from pymongo import MongoClient, GEO2D\n",
    "import gmaps\n",
    "from IPython.display import display"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "#! jupyter nbextension enable --py gmaps\n",
    "#! jupyter nbextension enable --py widgetsnbextension"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Establecemos la conexión con el servidor de Mongo"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "client = MongoClient()\n",
    "db = client.practica\n",
    "coleccion_tiempos = db.tiempos\n",
    "usuarios = db.usuarios"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Importamos los datos de todos los csv's."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>tripduration</th>\n",
       "      <th>starttime</th>\n",
       "      <th>stoptime</th>\n",
       "      <th>start station id</th>\n",
       "      <th>start station name</th>\n",
       "      <th>start station latitude</th>\n",
       "      <th>start station longitude</th>\n",
       "      <th>end station id</th>\n",
       "      <th>end station name</th>\n",
       "      <th>end station latitude</th>\n",
       "      <th>end station longitude</th>\n",
       "      <th>bikeid</th>\n",
       "      <th>usertype</th>\n",
       "      <th>birth year</th>\n",
       "      <th>gender</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>382</td>\n",
       "      <td>2014-02-01 00:00:00</td>\n",
       "      <td>2014-02-01 00:06:22</td>\n",
       "      <td>294</td>\n",
       "      <td>Washington Square E</td>\n",
       "      <td>40.730494</td>\n",
       "      <td>-73.995721</td>\n",
       "      <td>265</td>\n",
       "      <td>Stanton St &amp; Chrystie St</td>\n",
       "      <td>40.722293</td>\n",
       "      <td>-73.991475</td>\n",
       "      <td>21101</td>\n",
       "      <td>Subscriber</td>\n",
       "      <td>1991</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>372</td>\n",
       "      <td>2014-02-01 00:00:03</td>\n",
       "      <td>2014-02-01 00:06:15</td>\n",
       "      <td>285</td>\n",
       "      <td>Broadway &amp; E 14 St</td>\n",
       "      <td>40.734546</td>\n",
       "      <td>-73.990741</td>\n",
       "      <td>439</td>\n",
       "      <td>E 4 St &amp; 2 Ave</td>\n",
       "      <td>40.726281</td>\n",
       "      <td>-73.989780</td>\n",
       "      <td>15456</td>\n",
       "      <td>Subscriber</td>\n",
       "      <td>1979</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>591</td>\n",
       "      <td>2014-02-01 00:00:09</td>\n",
       "      <td>2014-02-01 00:10:00</td>\n",
       "      <td>247</td>\n",
       "      <td>Perry St &amp; Bleecker St</td>\n",
       "      <td>40.735354</td>\n",
       "      <td>-74.004831</td>\n",
       "      <td>251</td>\n",
       "      <td>Mott St &amp; Prince St</td>\n",
       "      <td>40.723180</td>\n",
       "      <td>-73.994800</td>\n",
       "      <td>16281</td>\n",
       "      <td>Subscriber</td>\n",
       "      <td>1948</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>583</td>\n",
       "      <td>2014-02-01 00:00:32</td>\n",
       "      <td>2014-02-01 00:10:15</td>\n",
       "      <td>357</td>\n",
       "      <td>E 11 St &amp; Broadway</td>\n",
       "      <td>40.732618</td>\n",
       "      <td>-73.991580</td>\n",
       "      <td>284</td>\n",
       "      <td>Greenwich Ave &amp; 8 Ave</td>\n",
       "      <td>40.739017</td>\n",
       "      <td>-74.002638</td>\n",
       "      <td>17400</td>\n",
       "      <td>Subscriber</td>\n",
       "      <td>1981</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>223</td>\n",
       "      <td>2014-02-01 00:00:41</td>\n",
       "      <td>2014-02-01 00:04:24</td>\n",
       "      <td>401</td>\n",
       "      <td>Allen St &amp; Rivington St</td>\n",
       "      <td>40.720196</td>\n",
       "      <td>-73.989978</td>\n",
       "      <td>439</td>\n",
       "      <td>E 4 St &amp; 2 Ave</td>\n",
       "      <td>40.726281</td>\n",
       "      <td>-73.989780</td>\n",
       "      <td>19341</td>\n",
       "      <td>Subscriber</td>\n",
       "      <td>1990</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>224731</th>\n",
       "      <td>848</td>\n",
       "      <td>2014-02-28 23:57:13</td>\n",
       "      <td>2014-03-01 00:11:21</td>\n",
       "      <td>498</td>\n",
       "      <td>Broadway &amp; W 32 St</td>\n",
       "      <td>40.748549</td>\n",
       "      <td>-73.988084</td>\n",
       "      <td>432</td>\n",
       "      <td>E 7 St &amp; Avenue A</td>\n",
       "      <td>40.726218</td>\n",
       "      <td>-73.983799</td>\n",
       "      <td>17413</td>\n",
       "      <td>Subscriber</td>\n",
       "      <td>1976</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>224732</th>\n",
       "      <td>1355</td>\n",
       "      <td>2014-02-28 23:57:55</td>\n",
       "      <td>2014-03-01 00:20:30</td>\n",
       "      <td>470</td>\n",
       "      <td>W 20 St &amp; 8 Ave</td>\n",
       "      <td>40.743453</td>\n",
       "      <td>-74.000040</td>\n",
       "      <td>302</td>\n",
       "      <td>Avenue D &amp; E 3 St</td>\n",
       "      <td>40.720828</td>\n",
       "      <td>-73.977932</td>\n",
       "      <td>15608</td>\n",
       "      <td>Subscriber</td>\n",
       "      <td>1985</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>224733</th>\n",
       "      <td>304</td>\n",
       "      <td>2014-02-28 23:58:17</td>\n",
       "      <td>2014-03-01 00:03:21</td>\n",
       "      <td>497</td>\n",
       "      <td>E 17 St &amp; Broadway</td>\n",
       "      <td>40.737050</td>\n",
       "      <td>-73.990093</td>\n",
       "      <td>334</td>\n",
       "      <td>W 20 St &amp; 7 Ave</td>\n",
       "      <td>40.742388</td>\n",
       "      <td>-73.997262</td>\n",
       "      <td>17112</td>\n",
       "      <td>Subscriber</td>\n",
       "      <td>1968</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>224734</th>\n",
       "      <td>308</td>\n",
       "      <td>2014-02-28 23:59:10</td>\n",
       "      <td>2014-03-01 00:04:18</td>\n",
       "      <td>353</td>\n",
       "      <td>S Portland Ave &amp; Hanson Pl</td>\n",
       "      <td>40.685396</td>\n",
       "      <td>-73.974315</td>\n",
       "      <td>365</td>\n",
       "      <td>Fulton St &amp; Grand Ave</td>\n",
       "      <td>40.682232</td>\n",
       "      <td>-73.961458</td>\n",
       "      <td>14761</td>\n",
       "      <td>Subscriber</td>\n",
       "      <td>1982</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>224735</th>\n",
       "      <td>603</td>\n",
       "      <td>2014-02-28 23:59:47</td>\n",
       "      <td>2014-03-01 00:09:50</td>\n",
       "      <td>252</td>\n",
       "      <td>MacDougal St &amp; Washington Sq</td>\n",
       "      <td>40.732264</td>\n",
       "      <td>-73.998522</td>\n",
       "      <td>475</td>\n",
       "      <td>E 16 St &amp; Irving Pl</td>\n",
       "      <td>40.735243</td>\n",
       "      <td>-73.987586</td>\n",
       "      <td>18783</td>\n",
       "      <td>Subscriber</td>\n",
       "      <td>1960</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>224736 rows × 15 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        tripduration            starttime             stoptime  \\\n",
       "0                382  2014-02-01 00:00:00  2014-02-01 00:06:22   \n",
       "1                372  2014-02-01 00:00:03  2014-02-01 00:06:15   \n",
       "2                591  2014-02-01 00:00:09  2014-02-01 00:10:00   \n",
       "3                583  2014-02-01 00:00:32  2014-02-01 00:10:15   \n",
       "4                223  2014-02-01 00:00:41  2014-02-01 00:04:24   \n",
       "...              ...                  ...                  ...   \n",
       "224731           848  2014-02-28 23:57:13  2014-03-01 00:11:21   \n",
       "224732          1355  2014-02-28 23:57:55  2014-03-01 00:20:30   \n",
       "224733           304  2014-02-28 23:58:17  2014-03-01 00:03:21   \n",
       "224734           308  2014-02-28 23:59:10  2014-03-01 00:04:18   \n",
       "224735           603  2014-02-28 23:59:47  2014-03-01 00:09:50   \n",
       "\n",
       "        start station id            start station name  \\\n",
       "0                    294           Washington Square E   \n",
       "1                    285            Broadway & E 14 St   \n",
       "2                    247        Perry St & Bleecker St   \n",
       "3                    357            E 11 St & Broadway   \n",
       "4                    401       Allen St & Rivington St   \n",
       "...                  ...                           ...   \n",
       "224731               498            Broadway & W 32 St   \n",
       "224732               470               W 20 St & 8 Ave   \n",
       "224733               497            E 17 St & Broadway   \n",
       "224734               353    S Portland Ave & Hanson Pl   \n",
       "224735               252  MacDougal St & Washington Sq   \n",
       "\n",
       "        start station latitude  start station longitude  end station id  \\\n",
       "0                    40.730494               -73.995721             265   \n",
       "1                    40.734546               -73.990741             439   \n",
       "2                    40.735354               -74.004831             251   \n",
       "3                    40.732618               -73.991580             284   \n",
       "4                    40.720196               -73.989978             439   \n",
       "...                        ...                      ...             ...   \n",
       "224731               40.748549               -73.988084             432   \n",
       "224732               40.743453               -74.000040             302   \n",
       "224733               40.737050               -73.990093             334   \n",
       "224734               40.685396               -73.974315             365   \n",
       "224735               40.732264               -73.998522             475   \n",
       "\n",
       "                end station name  end station latitude  end station longitude  \\\n",
       "0       Stanton St & Chrystie St             40.722293             -73.991475   \n",
       "1                 E 4 St & 2 Ave             40.726281             -73.989780   \n",
       "2            Mott St & Prince St             40.723180             -73.994800   \n",
       "3          Greenwich Ave & 8 Ave             40.739017             -74.002638   \n",
       "4                 E 4 St & 2 Ave             40.726281             -73.989780   \n",
       "...                          ...                   ...                    ...   \n",
       "224731         E 7 St & Avenue A             40.726218             -73.983799   \n",
       "224732         Avenue D & E 3 St             40.720828             -73.977932   \n",
       "224733           W 20 St & 7 Ave             40.742388             -73.997262   \n",
       "224734     Fulton St & Grand Ave             40.682232             -73.961458   \n",
       "224735       E 16 St & Irving Pl             40.735243             -73.987586   \n",
       "\n",
       "        bikeid    usertype birth year  gender  \n",
       "0        21101  Subscriber       1991       1  \n",
       "1        15456  Subscriber       1979       2  \n",
       "2        16281  Subscriber       1948       2  \n",
       "3        17400  Subscriber       1981       1  \n",
       "4        19341  Subscriber       1990       1  \n",
       "...        ...         ...        ...     ...  \n",
       "224731   17413  Subscriber       1976       1  \n",
       "224732   15608  Subscriber       1985       2  \n",
       "224733   17112  Subscriber       1968       1  \n",
       "224734   14761  Subscriber       1982       1  \n",
       "224735   18783  Subscriber       1960       1  \n",
       "\n",
       "[224736 rows x 15 columns]"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "csv_1 = pd.read_csv(\"201307-201402-citibike-tripdata/2013-07 - Citi Bike trip data.csv\")\n",
    "csv_2 = pd.read_csv(\"201307-201402-citibike-tripdata/2013-08 - Citi Bike trip data.csv\")\n",
    "csv_3 = pd.read_csv(\"201307-201402-citibike-tripdata/2013-09 - Citi Bike trip data.csv\")\n",
    "csv_4 = pd.read_csv(\"201307-201402-citibike-tripdata/2013-10 - Citi Bike trip data.csv\")\n",
    "csv_5 = pd.read_csv(\"201307-201402-citibike-tripdata/2013-11 - Citi Bike trip data.csv\")\n",
    "csv_6 = pd.read_csv(\"201307-201402-citibike-tripdata/2013-12 - Citi Bike trip data.csv\")\n",
    "csv_7 = pd.read_csv(\"201307-201402-citibike-tripdata/2014-01 - Citi Bike trip data.csv\")\n",
    "csv_8 = pd.read_csv(\"201307-201402-citibike-tripdata/2014-02 - Citi Bike trip data.csv\")\n",
    "csv_8"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Vamos a generar un preprocesamiento, con el fin de unir todas nuestras bases, tomar la información relevante y obtener el total denuestras estaciones, así como la lista de tiempos entre dos estaciones."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>tripduration</th>\n",
       "      <th>starttime</th>\n",
       "      <th>stoptime</th>\n",
       "      <th>start station id</th>\n",
       "      <th>start station name</th>\n",
       "      <th>start station latitude</th>\n",
       "      <th>start station longitude</th>\n",
       "      <th>end station id</th>\n",
       "      <th>end station name</th>\n",
       "      <th>end station latitude</th>\n",
       "      <th>end station longitude</th>\n",
       "      <th>bikeid</th>\n",
       "      <th>usertype</th>\n",
       "      <th>birth year</th>\n",
       "      <th>gender</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>634</td>\n",
       "      <td>2013-07-01 00:00:00</td>\n",
       "      <td>2013-07-01 00:10:34</td>\n",
       "      <td>164</td>\n",
       "      <td>E 47 St &amp; 2 Ave</td>\n",
       "      <td>40.753231</td>\n",
       "      <td>-73.970325</td>\n",
       "      <td>504</td>\n",
       "      <td>1 Ave &amp; E 15 St</td>\n",
       "      <td>40.732219</td>\n",
       "      <td>-73.981656</td>\n",
       "      <td>16950</td>\n",
       "      <td>Customer</td>\n",
       "      <td>\\N</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1547</td>\n",
       "      <td>2013-07-01 00:00:02</td>\n",
       "      <td>2013-07-01 00:25:49</td>\n",
       "      <td>388</td>\n",
       "      <td>W 26 St &amp; 10 Ave</td>\n",
       "      <td>40.749718</td>\n",
       "      <td>-74.002950</td>\n",
       "      <td>459</td>\n",
       "      <td>W 20 St &amp; 11 Ave</td>\n",
       "      <td>40.746745</td>\n",
       "      <td>-74.007756</td>\n",
       "      <td>19816</td>\n",
       "      <td>Customer</td>\n",
       "      <td>\\N</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>178</td>\n",
       "      <td>2013-07-01 00:01:04</td>\n",
       "      <td>2013-07-01 00:04:02</td>\n",
       "      <td>293</td>\n",
       "      <td>Lafayette St &amp; E 8 St</td>\n",
       "      <td>40.730287</td>\n",
       "      <td>-73.990765</td>\n",
       "      <td>237</td>\n",
       "      <td>E 11 St &amp; 2 Ave</td>\n",
       "      <td>40.730473</td>\n",
       "      <td>-73.986724</td>\n",
       "      <td>14548</td>\n",
       "      <td>Subscriber</td>\n",
       "      <td>1980</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1580</td>\n",
       "      <td>2013-07-01 00:01:06</td>\n",
       "      <td>2013-07-01 00:27:26</td>\n",
       "      <td>531</td>\n",
       "      <td>Forsyth St &amp; Broome St</td>\n",
       "      <td>40.718939</td>\n",
       "      <td>-73.992663</td>\n",
       "      <td>499</td>\n",
       "      <td>Broadway &amp; W 60 St</td>\n",
       "      <td>40.769155</td>\n",
       "      <td>-73.981918</td>\n",
       "      <td>16063</td>\n",
       "      <td>Customer</td>\n",
       "      <td>\\N</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>757</td>\n",
       "      <td>2013-07-01 00:01:10</td>\n",
       "      <td>2013-07-01 00:13:47</td>\n",
       "      <td>382</td>\n",
       "      <td>University Pl &amp; E 14 St</td>\n",
       "      <td>40.734927</td>\n",
       "      <td>-73.992005</td>\n",
       "      <td>410</td>\n",
       "      <td>Suffolk St &amp; Stanton St</td>\n",
       "      <td>40.720664</td>\n",
       "      <td>-73.985180</td>\n",
       "      <td>19213</td>\n",
       "      <td>Subscriber</td>\n",
       "      <td>1986</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5562316</th>\n",
       "      <td>848</td>\n",
       "      <td>2014-02-28 23:57:13</td>\n",
       "      <td>2014-03-01 00:11:21</td>\n",
       "      <td>498</td>\n",
       "      <td>Broadway &amp; W 32 St</td>\n",
       "      <td>40.748549</td>\n",
       "      <td>-73.988084</td>\n",
       "      <td>432</td>\n",
       "      <td>E 7 St &amp; Avenue A</td>\n",
       "      <td>40.726218</td>\n",
       "      <td>-73.983799</td>\n",
       "      <td>17413</td>\n",
       "      <td>Subscriber</td>\n",
       "      <td>1976</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5562317</th>\n",
       "      <td>1355</td>\n",
       "      <td>2014-02-28 23:57:55</td>\n",
       "      <td>2014-03-01 00:20:30</td>\n",
       "      <td>470</td>\n",
       "      <td>W 20 St &amp; 8 Ave</td>\n",
       "      <td>40.743453</td>\n",
       "      <td>-74.000040</td>\n",
       "      <td>302</td>\n",
       "      <td>Avenue D &amp; E 3 St</td>\n",
       "      <td>40.720828</td>\n",
       "      <td>-73.977932</td>\n",
       "      <td>15608</td>\n",
       "      <td>Subscriber</td>\n",
       "      <td>1985</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5562318</th>\n",
       "      <td>304</td>\n",
       "      <td>2014-02-28 23:58:17</td>\n",
       "      <td>2014-03-01 00:03:21</td>\n",
       "      <td>497</td>\n",
       "      <td>E 17 St &amp; Broadway</td>\n",
       "      <td>40.737050</td>\n",
       "      <td>-73.990093</td>\n",
       "      <td>334</td>\n",
       "      <td>W 20 St &amp; 7 Ave</td>\n",
       "      <td>40.742388</td>\n",
       "      <td>-73.997262</td>\n",
       "      <td>17112</td>\n",
       "      <td>Subscriber</td>\n",
       "      <td>1968</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5562319</th>\n",
       "      <td>308</td>\n",
       "      <td>2014-02-28 23:59:10</td>\n",
       "      <td>2014-03-01 00:04:18</td>\n",
       "      <td>353</td>\n",
       "      <td>S Portland Ave &amp; Hanson Pl</td>\n",
       "      <td>40.685396</td>\n",
       "      <td>-73.974315</td>\n",
       "      <td>365</td>\n",
       "      <td>Fulton St &amp; Grand Ave</td>\n",
       "      <td>40.682232</td>\n",
       "      <td>-73.961458</td>\n",
       "      <td>14761</td>\n",
       "      <td>Subscriber</td>\n",
       "      <td>1982</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5562320</th>\n",
       "      <td>603</td>\n",
       "      <td>2014-02-28 23:59:47</td>\n",
       "      <td>2014-03-01 00:09:50</td>\n",
       "      <td>252</td>\n",
       "      <td>MacDougal St &amp; Washington Sq</td>\n",
       "      <td>40.732264</td>\n",
       "      <td>-73.998522</td>\n",
       "      <td>475</td>\n",
       "      <td>E 16 St &amp; Irving Pl</td>\n",
       "      <td>40.735243</td>\n",
       "      <td>-73.987586</td>\n",
       "      <td>18783</td>\n",
       "      <td>Subscriber</td>\n",
       "      <td>1960</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5562321 rows × 15 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "         tripduration            starttime             stoptime  \\\n",
       "0                 634  2013-07-01 00:00:00  2013-07-01 00:10:34   \n",
       "1                1547  2013-07-01 00:00:02  2013-07-01 00:25:49   \n",
       "2                 178  2013-07-01 00:01:04  2013-07-01 00:04:02   \n",
       "3                1580  2013-07-01 00:01:06  2013-07-01 00:27:26   \n",
       "4                 757  2013-07-01 00:01:10  2013-07-01 00:13:47   \n",
       "...               ...                  ...                  ...   \n",
       "5562316           848  2014-02-28 23:57:13  2014-03-01 00:11:21   \n",
       "5562317          1355  2014-02-28 23:57:55  2014-03-01 00:20:30   \n",
       "5562318           304  2014-02-28 23:58:17  2014-03-01 00:03:21   \n",
       "5562319           308  2014-02-28 23:59:10  2014-03-01 00:04:18   \n",
       "5562320           603  2014-02-28 23:59:47  2014-03-01 00:09:50   \n",
       "\n",
       "         start station id            start station name  \\\n",
       "0                     164               E 47 St & 2 Ave   \n",
       "1                     388              W 26 St & 10 Ave   \n",
       "2                     293         Lafayette St & E 8 St   \n",
       "3                     531        Forsyth St & Broome St   \n",
       "4                     382       University Pl & E 14 St   \n",
       "...                   ...                           ...   \n",
       "5562316               498            Broadway & W 32 St   \n",
       "5562317               470               W 20 St & 8 Ave   \n",
       "5562318               497            E 17 St & Broadway   \n",
       "5562319               353    S Portland Ave & Hanson Pl   \n",
       "5562320               252  MacDougal St & Washington Sq   \n",
       "\n",
       "         start station latitude  start station longitude  end station id  \\\n",
       "0                     40.753231               -73.970325             504   \n",
       "1                     40.749718               -74.002950             459   \n",
       "2                     40.730287               -73.990765             237   \n",
       "3                     40.718939               -73.992663             499   \n",
       "4                     40.734927               -73.992005             410   \n",
       "...                         ...                      ...             ...   \n",
       "5562316               40.748549               -73.988084             432   \n",
       "5562317               40.743453               -74.000040             302   \n",
       "5562318               40.737050               -73.990093             334   \n",
       "5562319               40.685396               -73.974315             365   \n",
       "5562320               40.732264               -73.998522             475   \n",
       "\n",
       "                end station name  end station latitude  end station longitude  \\\n",
       "0                1 Ave & E 15 St             40.732219             -73.981656   \n",
       "1               W 20 St & 11 Ave             40.746745             -74.007756   \n",
       "2                E 11 St & 2 Ave             40.730473             -73.986724   \n",
       "3             Broadway & W 60 St             40.769155             -73.981918   \n",
       "4        Suffolk St & Stanton St             40.720664             -73.985180   \n",
       "...                          ...                   ...                    ...   \n",
       "5562316        E 7 St & Avenue A             40.726218             -73.983799   \n",
       "5562317        Avenue D & E 3 St             40.720828             -73.977932   \n",
       "5562318          W 20 St & 7 Ave             40.742388             -73.997262   \n",
       "5562319    Fulton St & Grand Ave             40.682232             -73.961458   \n",
       "5562320      E 16 St & Irving Pl             40.735243             -73.987586   \n",
       "\n",
       "         bikeid    usertype birth year  gender  \n",
       "0         16950    Customer         \\N       0  \n",
       "1         19816    Customer         \\N       0  \n",
       "2         14548  Subscriber       1980       2  \n",
       "3         16063    Customer         \\N       0  \n",
       "4         19213  Subscriber       1986       1  \n",
       "...         ...         ...        ...     ...  \n",
       "5562316   17413  Subscriber       1976       1  \n",
       "5562317   15608  Subscriber       1985       2  \n",
       "5562318   17112  Subscriber       1968       1  \n",
       "5562319   14761  Subscriber       1982       1  \n",
       "5562320   18783  Subscriber       1960       1  \n",
       "\n",
       "[5562321 rows x 15 columns]"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "datos = pd.concat([csv_1,csv_2,csv_3,csv_4,csv_5,csv_6,csv_7,csv_8], ignore_index=True)\n",
    "datos"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>start station id</th>\n",
       "      <th>start station latitude</th>\n",
       "      <th>start station longitude</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>164</td>\n",
       "      <td>40.753231</td>\n",
       "      <td>-73.970325</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>388</td>\n",
       "      <td>40.749718</td>\n",
       "      <td>-74.002950</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>293</td>\n",
       "      <td>40.730287</td>\n",
       "      <td>-73.990765</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>531</td>\n",
       "      <td>40.718939</td>\n",
       "      <td>-73.992663</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>382</td>\n",
       "      <td>40.734927</td>\n",
       "      <td>-73.992005</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>325</th>\n",
       "      <td>372</td>\n",
       "      <td>40.694528</td>\n",
       "      <td>-73.958089</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>326</th>\n",
       "      <td>119</td>\n",
       "      <td>40.696089</td>\n",
       "      <td>-73.978034</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>327</th>\n",
       "      <td>2017</td>\n",
       "      <td>40.750224</td>\n",
       "      <td>-73.971214</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>328</th>\n",
       "      <td>2010</td>\n",
       "      <td>40.721655</td>\n",
       "      <td>-74.002347</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>329</th>\n",
       "      <td>502</td>\n",
       "      <td>40.714215</td>\n",
       "      <td>-73.981346</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>330 rows × 3 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     start station id  start station latitude  start station longitude\n",
       "0                 164               40.753231               -73.970325\n",
       "1                 388               40.749718               -74.002950\n",
       "2                 293               40.730287               -73.990765\n",
       "3                 531               40.718939               -73.992663\n",
       "4                 382               40.734927               -73.992005\n",
       "..                ...                     ...                      ...\n",
       "325               372               40.694528               -73.958089\n",
       "326               119               40.696089               -73.978034\n",
       "327              2017               40.750224               -73.971214\n",
       "328              2010               40.721655               -74.002347\n",
       "329               502               40.714215               -73.981346\n",
       "\n",
       "[330 rows x 3 columns]"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "inicios = datos[['start station id', 'start station latitude', 'start station longitude']]\n",
    "terminos = datos[['end station id', 'end station latitude', 'end station longitude']]\n",
    "terminos.columns = ['start station id', 'start station latitude', 'start station longitude']\n",
    "locaciones = pd.concat([inicios, terminos], ignore_index=True)\n",
    "locaciones = locaciones.drop_duplicates(ignore_index=True)\n",
    "\n",
    "locaciones"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Mapa.\n",
    "\n",
    "Vamos agráficar las estaciones sobre un mapa para tener una idea de la distribución de neustras estaciones. Usaremos la API de Google Maps."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "\n",
       "    <div class=\"bk-root\">\n",
       "        <a href=\"https://bokeh.org\" target=\"_blank\" class=\"bk-logo bk-logo-small bk-logo-notebook\"></a>\n",
       "        <span id=\"1001\">Loading BokehJS ...</span>\n",
       "    </div>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/javascript": [
       "\n",
       "(function(root) {\n",
       "  function now() {\n",
       "    return new Date();\n",
       "  }\n",
       "\n",
       "  var force = true;\n",
       "\n",
       "  if (typeof root._bokeh_onload_callbacks === \"undefined\" || force === true) {\n",
       "    root._bokeh_onload_callbacks = [];\n",
       "    root._bokeh_is_loading = undefined;\n",
       "  }\n",
       "\n",
       "  var JS_MIME_TYPE = 'application/javascript';\n",
       "  var HTML_MIME_TYPE = 'text/html';\n",
       "  var EXEC_MIME_TYPE = 'application/vnd.bokehjs_exec.v0+json';\n",
       "  var CLASS_NAME = 'output_bokeh rendered_html';\n",
       "\n",
       "  /**\n",
       "   * Render data to the DOM node\n",
       "   */\n",
       "  function render(props, node) {\n",
       "    var script = document.createElement(\"script\");\n",
       "    node.appendChild(script);\n",
       "  }\n",
       "\n",
       "  /**\n",
       "   * Handle when an output is cleared or removed\n",
       "   */\n",
       "  function handleClearOutput(event, handle) {\n",
       "    var cell = handle.cell;\n",
       "\n",
       "    var id = cell.output_area._bokeh_element_id;\n",
       "    var server_id = cell.output_area._bokeh_server_id;\n",
       "    // Clean up Bokeh references\n",
       "    if (id != null && id in Bokeh.index) {\n",
       "      Bokeh.index[id].model.document.clear();\n",
       "      delete Bokeh.index[id];\n",
       "    }\n",
       "\n",
       "    if (server_id !== undefined) {\n",
       "      // Clean up Bokeh references\n",
       "      var cmd = \"from bokeh.io.state import curstate; print(curstate().uuid_to_server['\" + server_id + \"'].get_sessions()[0].document.roots[0]._id)\";\n",
       "      cell.notebook.kernel.execute(cmd, {\n",
       "        iopub: {\n",
       "          output: function(msg) {\n",
       "            var id = msg.content.text.trim();\n",
       "            if (id in Bokeh.index) {\n",
       "              Bokeh.index[id].model.document.clear();\n",
       "              delete Bokeh.index[id];\n",
       "            }\n",
       "          }\n",
       "        }\n",
       "      });\n",
       "      // Destroy server and session\n",
       "      var cmd = \"import bokeh.io.notebook as ion; ion.destroy_server('\" + server_id + \"')\";\n",
       "      cell.notebook.kernel.execute(cmd);\n",
       "    }\n",
       "  }\n",
       "\n",
       "  /**\n",
       "   * Handle when a new output is added\n",
       "   */\n",
       "  function handleAddOutput(event, handle) {\n",
       "    var output_area = handle.output_area;\n",
       "    var output = handle.output;\n",
       "\n",
       "    // limit handleAddOutput to display_data with EXEC_MIME_TYPE content only\n",
       "    if ((output.output_type != \"display_data\") || (!output.data.hasOwnProperty(EXEC_MIME_TYPE))) {\n",
       "      return\n",
       "    }\n",
       "\n",
       "    var toinsert = output_area.element.find(\".\" + CLASS_NAME.split(' ')[0]);\n",
       "\n",
       "    if (output.metadata[EXEC_MIME_TYPE][\"id\"] !== undefined) {\n",
       "      toinsert[toinsert.length - 1].firstChild.textContent = output.data[JS_MIME_TYPE];\n",
       "      // store reference to embed id on output_area\n",
       "      output_area._bokeh_element_id = output.metadata[EXEC_MIME_TYPE][\"id\"];\n",
       "    }\n",
       "    if (output.metadata[EXEC_MIME_TYPE][\"server_id\"] !== undefined) {\n",
       "      var bk_div = document.createElement(\"div\");\n",
       "      bk_div.innerHTML = output.data[HTML_MIME_TYPE];\n",
       "      var script_attrs = bk_div.children[0].attributes;\n",
       "      for (var i = 0; i < script_attrs.length; i++) {\n",
       "        toinsert[toinsert.length - 1].firstChild.setAttribute(script_attrs[i].name, script_attrs[i].value);\n",
       "        toinsert[toinsert.length - 1].firstChild.textContent = bk_div.children[0].textContent\n",
       "      }\n",
       "      // store reference to server id on output_area\n",
       "      output_area._bokeh_server_id = output.metadata[EXEC_MIME_TYPE][\"server_id\"];\n",
       "    }\n",
       "  }\n",
       "\n",
       "  function register_renderer(events, OutputArea) {\n",
       "\n",
       "    function append_mime(data, metadata, element) {\n",
       "      // create a DOM node to render to\n",
       "      var toinsert = this.create_output_subarea(\n",
       "        metadata,\n",
       "        CLASS_NAME,\n",
       "        EXEC_MIME_TYPE\n",
       "      );\n",
       "      this.keyboard_manager.register_events(toinsert);\n",
       "      // Render to node\n",
       "      var props = {data: data, metadata: metadata[EXEC_MIME_TYPE]};\n",
       "      render(props, toinsert[toinsert.length - 1]);\n",
       "      element.append(toinsert);\n",
       "      return toinsert\n",
       "    }\n",
       "\n",
       "    /* Handle when an output is cleared or removed */\n",
       "    events.on('clear_output.CodeCell', handleClearOutput);\n",
       "    events.on('delete.Cell', handleClearOutput);\n",
       "\n",
       "    /* Handle when a new output is added */\n",
       "    events.on('output_added.OutputArea', handleAddOutput);\n",
       "\n",
       "    /**\n",
       "     * Register the mime type and append_mime function with output_area\n",
       "     */\n",
       "    OutputArea.prototype.register_mime_type(EXEC_MIME_TYPE, append_mime, {\n",
       "      /* Is output safe? */\n",
       "      safe: true,\n",
       "      /* Index of renderer in `output_area.display_order` */\n",
       "      index: 0\n",
       "    });\n",
       "  }\n",
       "\n",
       "  // register the mime type if in Jupyter Notebook environment and previously unregistered\n",
       "  if (root.Jupyter !== undefined) {\n",
       "    var events = require('base/js/events');\n",
       "    var OutputArea = require('notebook/js/outputarea').OutputArea;\n",
       "\n",
       "    if (OutputArea.prototype.mime_types().indexOf(EXEC_MIME_TYPE) == -1) {\n",
       "      register_renderer(events, OutputArea);\n",
       "    }\n",
       "  }\n",
       "\n",
       "  \n",
       "  if (typeof (root._bokeh_timeout) === \"undefined\" || force === true) {\n",
       "    root._bokeh_timeout = Date.now() + 5000;\n",
       "    root._bokeh_failed_load = false;\n",
       "  }\n",
       "\n",
       "  var NB_LOAD_WARNING = {'data': {'text/html':\n",
       "     \"<div style='background-color: #fdd'>\\n\"+\n",
       "     \"<p>\\n\"+\n",
       "     \"BokehJS does not appear to have successfully loaded. If loading BokehJS from CDN, this \\n\"+\n",
       "     \"may be due to a slow or bad network connection. Possible fixes:\\n\"+\n",
       "     \"</p>\\n\"+\n",
       "     \"<ul>\\n\"+\n",
       "     \"<li>re-rerun `output_notebook()` to attempt to load from CDN again, or</li>\\n\"+\n",
       "     \"<li>use INLINE resources instead, as so:</li>\\n\"+\n",
       "     \"</ul>\\n\"+\n",
       "     \"<code>\\n\"+\n",
       "     \"from bokeh.resources import INLINE\\n\"+\n",
       "     \"output_notebook(resources=INLINE)\\n\"+\n",
       "     \"</code>\\n\"+\n",
       "     \"</div>\"}};\n",
       "\n",
       "  function display_loaded() {\n",
       "    var el = document.getElementById(\"1001\");\n",
       "    if (el != null) {\n",
       "      el.textContent = \"BokehJS is loading...\";\n",
       "    }\n",
       "    if (root.Bokeh !== undefined) {\n",
       "      if (el != null) {\n",
       "        el.textContent = \"BokehJS \" + root.Bokeh.version + \" successfully loaded.\";\n",
       "      }\n",
       "    } else if (Date.now() < root._bokeh_timeout) {\n",
       "      setTimeout(display_loaded, 100)\n",
       "    }\n",
       "  }\n",
       "\n",
       "\n",
       "  function run_callbacks() {\n",
       "    try {\n",
       "      root._bokeh_onload_callbacks.forEach(function(callback) {\n",
       "        if (callback != null)\n",
       "          callback();\n",
       "      });\n",
       "    } finally {\n",
       "      delete root._bokeh_onload_callbacks\n",
       "    }\n",
       "    console.debug(\"Bokeh: all callbacks have finished\");\n",
       "  }\n",
       "\n",
       "  function load_libs(css_urls, js_urls, callback) {\n",
       "    if (css_urls == null) css_urls = [];\n",
       "    if (js_urls == null) js_urls = [];\n",
       "\n",
       "    root._bokeh_onload_callbacks.push(callback);\n",
       "    if (root._bokeh_is_loading > 0) {\n",
       "      console.debug(\"Bokeh: BokehJS is being loaded, scheduling callback at\", now());\n",
       "      return null;\n",
       "    }\n",
       "    if (js_urls == null || js_urls.length === 0) {\n",
       "      run_callbacks();\n",
       "      return null;\n",
       "    }\n",
       "    console.debug(\"Bokeh: BokehJS not loaded, scheduling load and callback at\", now());\n",
       "    root._bokeh_is_loading = css_urls.length + js_urls.length;\n",
       "\n",
       "    function on_load() {\n",
       "      root._bokeh_is_loading--;\n",
       "      if (root._bokeh_is_loading === 0) {\n",
       "        console.debug(\"Bokeh: all BokehJS libraries/stylesheets loaded\");\n",
       "        run_callbacks()\n",
       "      }\n",
       "    }\n",
       "\n",
       "    function on_error() {\n",
       "      console.error(\"failed to load \" + url);\n",
       "    }\n",
       "\n",
       "    for (var i = 0; i < css_urls.length; i++) {\n",
       "      var url = css_urls[i];\n",
       "      const element = document.createElement(\"link\");\n",
       "      element.onload = on_load;\n",
       "      element.onerror = on_error;\n",
       "      element.rel = \"stylesheet\";\n",
       "      element.type = \"text/css\";\n",
       "      element.href = url;\n",
       "      console.debug(\"Bokeh: injecting link tag for BokehJS stylesheet: \", url);\n",
       "      document.body.appendChild(element);\n",
       "    }\n",
       "\n",
       "    const hashes = {\"https://cdn.bokeh.org/bokeh/release/bokeh-2.2.3.min.js\": \"T2yuo9Oe71Cz/I4X9Ac5+gpEa5a8PpJCDlqKYO0CfAuEszu1JrXLl8YugMqYe3sM\", \"https://cdn.bokeh.org/bokeh/release/bokeh-widgets-2.2.3.min.js\": \"98GDGJ0kOMCUMUePhksaQ/GYgB3+NH9h996V88sh3aOiUNX3N+fLXAtry6xctSZ6\", \"https://cdn.bokeh.org/bokeh/release/bokeh-tables-2.2.3.min.js\": \"89bArO+nlbP3sgakeHjCo1JYxYR5wufVgA3IbUvDY+K7w4zyxJqssu7wVnfeKCq8\"};\n",
       "\n",
       "    for (var i = 0; i < js_urls.length; i++) {\n",
       "      var url = js_urls[i];\n",
       "      var element = document.createElement('script');\n",
       "      element.onload = on_load;\n",
       "      element.onerror = on_error;\n",
       "      element.async = false;\n",
       "      element.src = url;\n",
       "      if (url in hashes) {\n",
       "        element.crossOrigin = \"anonymous\";\n",
       "        element.integrity = \"sha384-\" + hashes[url];\n",
       "      }\n",
       "      console.debug(\"Bokeh: injecting script tag for BokehJS library: \", url);\n",
       "      document.head.appendChild(element);\n",
       "    }\n",
       "  };\n",
       "\n",
       "  function inject_raw_css(css) {\n",
       "    const element = document.createElement(\"style\");\n",
       "    element.appendChild(document.createTextNode(css));\n",
       "    document.body.appendChild(element);\n",
       "  }\n",
       "\n",
       "  \n",
       "  var js_urls = [\"https://cdn.bokeh.org/bokeh/release/bokeh-2.2.3.min.js\", \"https://cdn.bokeh.org/bokeh/release/bokeh-widgets-2.2.3.min.js\", \"https://cdn.bokeh.org/bokeh/release/bokeh-tables-2.2.3.min.js\"];\n",
       "  var css_urls = [];\n",
       "  \n",
       "\n",
       "  var inline_js = [\n",
       "    function(Bokeh) {\n",
       "      Bokeh.set_log_level(\"info\");\n",
       "    },\n",
       "    function(Bokeh) {\n",
       "    \n",
       "    \n",
       "    }\n",
       "  ];\n",
       "\n",
       "  function run_inline_js() {\n",
       "    \n",
       "    if (root.Bokeh !== undefined || force === true) {\n",
       "      \n",
       "    for (var i = 0; i < inline_js.length; i++) {\n",
       "      inline_js[i].call(root, root.Bokeh);\n",
       "    }\n",
       "    if (force === true) {\n",
       "        display_loaded();\n",
       "      }} else if (Date.now() < root._bokeh_timeout) {\n",
       "      setTimeout(run_inline_js, 100);\n",
       "    } else if (!root._bokeh_failed_load) {\n",
       "      console.log(\"Bokeh: BokehJS failed to load within specified timeout.\");\n",
       "      root._bokeh_failed_load = true;\n",
       "    } else if (force !== true) {\n",
       "      var cell = $(document.getElementById(\"1001\")).parents('.cell').data().cell;\n",
       "      cell.output_area.append_execute_result(NB_LOAD_WARNING)\n",
       "    }\n",
       "\n",
       "  }\n",
       "\n",
       "  if (root._bokeh_is_loading === 0) {\n",
       "    console.debug(\"Bokeh: BokehJS loaded, going straight to plotting\");\n",
       "    run_inline_js();\n",
       "  } else {\n",
       "    load_libs(css_urls, js_urls, function() {\n",
       "      console.debug(\"Bokeh: BokehJS plotting callback run at\", now());\n",
       "      run_inline_js();\n",
       "    });\n",
       "  }\n",
       "}(window));"
      ],
      "application/vnd.bokehjs_load.v0+json": "\n(function(root) {\n  function now() {\n    return new Date();\n  }\n\n  var force = true;\n\n  if (typeof root._bokeh_onload_callbacks === \"undefined\" || force === true) {\n    root._bokeh_onload_callbacks = [];\n    root._bokeh_is_loading = undefined;\n  }\n\n  \n\n  \n  if (typeof (root._bokeh_timeout) === \"undefined\" || force === true) {\n    root._bokeh_timeout = Date.now() + 5000;\n    root._bokeh_failed_load = false;\n  }\n\n  var NB_LOAD_WARNING = {'data': {'text/html':\n     \"<div style='background-color: #fdd'>\\n\"+\n     \"<p>\\n\"+\n     \"BokehJS does not appear to have successfully loaded. If loading BokehJS from CDN, this \\n\"+\n     \"may be due to a slow or bad network connection. Possible fixes:\\n\"+\n     \"</p>\\n\"+\n     \"<ul>\\n\"+\n     \"<li>re-rerun `output_notebook()` to attempt to load from CDN again, or</li>\\n\"+\n     \"<li>use INLINE resources instead, as so:</li>\\n\"+\n     \"</ul>\\n\"+\n     \"<code>\\n\"+\n     \"from bokeh.resources import INLINE\\n\"+\n     \"output_notebook(resources=INLINE)\\n\"+\n     \"</code>\\n\"+\n     \"</div>\"}};\n\n  function display_loaded() {\n    var el = document.getElementById(\"1001\");\n    if (el != null) {\n      el.textContent = \"BokehJS is loading...\";\n    }\n    if (root.Bokeh !== undefined) {\n      if (el != null) {\n        el.textContent = \"BokehJS \" + root.Bokeh.version + \" successfully loaded.\";\n      }\n    } else if (Date.now() < root._bokeh_timeout) {\n      setTimeout(display_loaded, 100)\n    }\n  }\n\n\n  function run_callbacks() {\n    try {\n      root._bokeh_onload_callbacks.forEach(function(callback) {\n        if (callback != null)\n          callback();\n      });\n    } finally {\n      delete root._bokeh_onload_callbacks\n    }\n    console.debug(\"Bokeh: all callbacks have finished\");\n  }\n\n  function load_libs(css_urls, js_urls, callback) {\n    if (css_urls == null) css_urls = [];\n    if (js_urls == null) js_urls = [];\n\n    root._bokeh_onload_callbacks.push(callback);\n    if (root._bokeh_is_loading > 0) {\n      console.debug(\"Bokeh: BokehJS is being loaded, scheduling callback at\", now());\n      return null;\n    }\n    if (js_urls == null || js_urls.length === 0) {\n      run_callbacks();\n      return null;\n    }\n    console.debug(\"Bokeh: BokehJS not loaded, scheduling load and callback at\", now());\n    root._bokeh_is_loading = css_urls.length + js_urls.length;\n\n    function on_load() {\n      root._bokeh_is_loading--;\n      if (root._bokeh_is_loading === 0) {\n        console.debug(\"Bokeh: all BokehJS libraries/stylesheets loaded\");\n        run_callbacks()\n      }\n    }\n\n    function on_error() {\n      console.error(\"failed to load \" + url);\n    }\n\n    for (var i = 0; i < css_urls.length; i++) {\n      var url = css_urls[i];\n      const element = document.createElement(\"link\");\n      element.onload = on_load;\n      element.onerror = on_error;\n      element.rel = \"stylesheet\";\n      element.type = \"text/css\";\n      element.href = url;\n      console.debug(\"Bokeh: injecting link tag for BokehJS stylesheet: \", url);\n      document.body.appendChild(element);\n    }\n\n    const hashes = {\"https://cdn.bokeh.org/bokeh/release/bokeh-2.2.3.min.js\": \"T2yuo9Oe71Cz/I4X9Ac5+gpEa5a8PpJCDlqKYO0CfAuEszu1JrXLl8YugMqYe3sM\", \"https://cdn.bokeh.org/bokeh/release/bokeh-widgets-2.2.3.min.js\": \"98GDGJ0kOMCUMUePhksaQ/GYgB3+NH9h996V88sh3aOiUNX3N+fLXAtry6xctSZ6\", \"https://cdn.bokeh.org/bokeh/release/bokeh-tables-2.2.3.min.js\": \"89bArO+nlbP3sgakeHjCo1JYxYR5wufVgA3IbUvDY+K7w4zyxJqssu7wVnfeKCq8\"};\n\n    for (var i = 0; i < js_urls.length; i++) {\n      var url = js_urls[i];\n      var element = document.createElement('script');\n      element.onload = on_load;\n      element.onerror = on_error;\n      element.async = false;\n      element.src = url;\n      if (url in hashes) {\n        element.crossOrigin = \"anonymous\";\n        element.integrity = \"sha384-\" + hashes[url];\n      }\n      console.debug(\"Bokeh: injecting script tag for BokehJS library: \", url);\n      document.head.appendChild(element);\n    }\n  };\n\n  function inject_raw_css(css) {\n    const element = document.createElement(\"style\");\n    element.appendChild(document.createTextNode(css));\n    document.body.appendChild(element);\n  }\n\n  \n  var js_urls = [\"https://cdn.bokeh.org/bokeh/release/bokeh-2.2.3.min.js\", \"https://cdn.bokeh.org/bokeh/release/bokeh-widgets-2.2.3.min.js\", \"https://cdn.bokeh.org/bokeh/release/bokeh-tables-2.2.3.min.js\"];\n  var css_urls = [];\n  \n\n  var inline_js = [\n    function(Bokeh) {\n      Bokeh.set_log_level(\"info\");\n    },\n    function(Bokeh) {\n    \n    \n    }\n  ];\n\n  function run_inline_js() {\n    \n    if (root.Bokeh !== undefined || force === true) {\n      \n    for (var i = 0; i < inline_js.length; i++) {\n      inline_js[i].call(root, root.Bokeh);\n    }\n    if (force === true) {\n        display_loaded();\n      }} else if (Date.now() < root._bokeh_timeout) {\n      setTimeout(run_inline_js, 100);\n    } else if (!root._bokeh_failed_load) {\n      console.log(\"Bokeh: BokehJS failed to load within specified timeout.\");\n      root._bokeh_failed_load = true;\n    } else if (force !== true) {\n      var cell = $(document.getElementById(\"1001\")).parents('.cell').data().cell;\n      cell.output_area.append_execute_result(NB_LOAD_WARNING)\n    }\n\n  }\n\n  if (root._bokeh_is_loading === 0) {\n    console.debug(\"Bokeh: BokehJS loaded, going straight to plotting\");\n    run_inline_js();\n  } else {\n    load_libs(css_urls, js_urls, function() {\n      console.debug(\"Bokeh: BokehJS plotting callback run at\", now());\n      run_inline_js();\n    });\n  }\n}(window));"
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "from bokeh.io import output_notebook\n",
    "output_notebook()\n",
    "bokeh_width, bokeh_height = 600,500"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "api_key = 'AIzaSyCQJea5VznV2GGbK_cQB_JuGjscgw8SEAs'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "from bokeh.io import show\n",
    "from bokeh.plotting import gmap\n",
    "from bokeh.models import GMapOptions\n",
    "from bokeh.models import ColumnDataSource\n",
    "\n",
    "# Función que gráfica las ubicaciones sobre un punto:\n",
    "# Se establece como punto base el centro de Manhatthan.\n",
    "\n",
    "def plot(lat, lng, lug, zoom=10, map_type='roadmap'):\n",
    "    df = pd.DataFrame(list(zip(lng, lat)),\n",
    "               columns =['lon', 'lat'])\n",
    "\n",
    "    gmap_options = GMapOptions(lat=lug[0], lng=lug[1], \n",
    "                               map_type=map_type, zoom=zoom)\n",
    "    # the tools are defined below: \n",
    "    p = gmap(api_key, gmap_options, title='Ubicaciones', \n",
    "             width=bokeh_width, height=bokeh_height,\n",
    "             tools=['hover', 'reset', 'wheel_zoom', 'pan'])\n",
    "    source = ColumnDataSource(df)\n",
    "    center_1 = p.circle([lug[1]], [lug[0]], size=14, alpha=1, color='red')\n",
    "    center = p.circle('lon', 'lat', size=10, alpha=1, \n",
    "                      color='#3F33FF', source=source)\n",
    "    show(p)\n",
    "    return p"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "\n",
       "\n",
       "\n",
       "\n",
       "\n",
       "\n",
       "  <div class=\"bk-root\" id=\"38fc90a5-fcc8-4908-a77d-0f40221276f7\" data-root-id=\"1003\"></div>\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/javascript": [
       "(function(root) {\n",
       "  function embed_document(root) {\n",
       "    \n",
       "  var docs_json = {\"0cc7a503-e880-4c43-898c-b6788e0e0200\":{\"roots\":{\"references\":[{\"attributes\":{\"api_key\":\"QUl6YVN5Q1FKZWE1VnpuVjJHR2JLX2NRQl9KdUdqc2NndzhTRUFz\",\"below\":[{\"id\":\"1012\"}],\"left\":[{\"id\":\"1017\"}],\"map_options\":{\"id\":\"1002\"},\"plot_height\":500,\"renderers\":[{\"id\":\"1033\"},{\"id\":\"1038\"}],\"title\":{\"id\":\"1004\"},\"toolbar\":{\"id\":\"1024\"},\"x_range\":{\"id\":\"1005\"},\"x_scale\":{\"id\":\"1041\"},\"y_range\":{\"id\":\"1006\"},\"y_scale\":{\"id\":\"1042\"}},\"id\":\"1003\",\"subtype\":\"GMap\",\"type\":\"GMapPlot\"},{\"attributes\":{\"callback\":null},\"id\":\"1020\",\"type\":\"HoverTool\"},{\"attributes\":{\"active_drag\":\"auto\",\"active_inspect\":\"auto\",\"active_multi\":null,\"active_scroll\":\"auto\",\"active_tap\":\"auto\",\"tools\":[{\"id\":\"1020\"},{\"id\":\"1021\"},{\"id\":\"1022\"},{\"id\":\"1023\"}]},\"id\":\"1024\",\"type\":\"Toolbar\"},{\"attributes\":{\"fill_color\":{\"value\":\"#3F33FF\"},\"line_color\":{\"value\":\"#3F33FF\"},\"size\":{\"units\":\"screen\",\"value\":10},\"x\":{\"field\":\"lon\"},\"y\":{\"field\":\"lat\"}},\"id\":\"1036\",\"type\":\"Circle\"},{\"attributes\":{},\"id\":\"1005\",\"type\":\"Range1d\"},{\"attributes\":{\"dimension\":\"lat\"},\"id\":\"1016\",\"type\":\"MercatorTicker\"},{\"attributes\":{\"fill_color\":{\"value\":\"red\"},\"line_color\":{\"value\":\"red\"},\"size\":{\"units\":\"screen\",\"value\":14},\"x\":{\"field\":\"x\"},\"y\":{\"field\":\"y\"}},\"id\":\"1031\",\"type\":\"Circle\"},{\"attributes\":{\"dimension\":\"lat\"},\"id\":\"1015\",\"type\":\"MercatorTickFormatter\"},{\"attributes\":{\"data_source\":{\"id\":\"1029\"},\"glyph\":{\"id\":\"1036\"},\"hover_glyph\":null,\"muted_glyph\":null,\"nonselection_glyph\":{\"id\":\"1037\"},\"selection_glyph\":null,\"view\":{\"id\":\"1039\"}},\"id\":\"1038\",\"type\":\"GlyphRenderer\"},{\"attributes\":{},\"id\":\"1021\",\"type\":\"ResetTool\"},{\"attributes\":{\"dimension\":\"lon\"},\"id\":\"1010\",\"type\":\"MercatorTickFormatter\"},{\"attributes\":{},\"id\":\"1022\",\"type\":\"WheelZoomTool\"},{\"attributes\":{\"data\":{\"x\":[-73.978255],\"y\":[40.736962]},\"selected\":{\"id\":\"1043\"},\"selection_policy\":{\"id\":\"1044\"}},\"id\":\"1030\",\"type\":\"ColumnDataSource\"},{\"attributes\":{\"fill_alpha\":{\"value\":0.1},\"fill_color\":{\"value\":\"#3F33FF\"},\"line_alpha\":{\"value\":0.1},\"line_color\":{\"value\":\"#3F33FF\"},\"size\":{\"units\":\"screen\",\"value\":10},\"x\":{\"field\":\"lon\"},\"y\":{\"field\":\"lat\"}},\"id\":\"1037\",\"type\":\"Circle\"},{\"attributes\":{\"fill_alpha\":{\"value\":0.1},\"fill_color\":{\"value\":\"red\"},\"line_alpha\":{\"value\":0.1},\"line_color\":{\"value\":\"red\"},\"size\":{\"units\":\"screen\",\"value\":14},\"x\":{\"field\":\"x\"},\"y\":{\"field\":\"y\"}},\"id\":\"1032\",\"type\":\"Circle\"},{\"attributes\":{},\"id\":\"1043\",\"type\":\"Selection\"},{\"attributes\":{\"data_source\":{\"id\":\"1030\"},\"glyph\":{\"id\":\"1031\"},\"hover_glyph\":null,\"muted_glyph\":null,\"nonselection_glyph\":{\"id\":\"1032\"},\"selection_glyph\":null,\"view\":{\"id\":\"1034\"}},\"id\":\"1033\",\"type\":\"GlyphRenderer\"},{\"attributes\":{\"formatter\":{\"id\":\"1010\"},\"ticker\":{\"id\":\"1011\"}},\"id\":\"1012\",\"type\":\"LinearAxis\"},{\"attributes\":{},\"id\":\"1044\",\"type\":\"UnionRenderers\"},{\"attributes\":{},\"id\":\"1006\",\"type\":\"Range1d\"},{\"attributes\":{},\"id\":\"1023\",\"type\":\"PanTool\"},{\"attributes\":{\"source\":{\"id\":\"1030\"}},\"id\":\"1034\",\"type\":\"CDSView\"},{\"attributes\":{\"source\":{\"id\":\"1029\"}},\"id\":\"1039\",\"type\":\"CDSView\"},{\"attributes\":{\"text\":\"Ubicaciones\"},\"id\":\"1004\",\"type\":\"Title\"},{\"attributes\":{\"formatter\":{\"id\":\"1015\"},\"ticker\":{\"id\":\"1016\"}},\"id\":\"1017\",\"type\":\"LinearAxis\"},{\"attributes\":{\"dimension\":\"lon\"},\"id\":\"1011\",\"type\":\"MercatorTicker\"},{\"attributes\":{},\"id\":\"1045\",\"type\":\"Selection\"},{\"attributes\":{\"data\":{\"index\":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329],\"lat\":{\"__ndarray__\":\"jrds32lgREDMLlfA9l9EQNmzhAh6XURAD0/IMQZcREB6mRcWEl5EQPRwXYxcXURA6wuVPRFbREBrLx619FxEQL9tv99cYURAv60mFa5bREAVngImkVxEQCsIDv1NYURABvA3VrldRECNxLqnYV9EQL6OD+XRYERAAy24eilfRECGPIIbqV9EQE5Gtm9FXkRAdKIT+PlYRECxKsq+DmBEQEkShCugYkRAtwqkvD1gREA4Xst1ZFxEQOZ0WUxsXERAaK3LndddREA99cRKt2FEQAa7QM25XURAwgivlwVeREA6KUhD+F5EQChmGNI8XURAOxRoJIBdREC+DiBsxl1EQBuADYiQW0RABUu3HQFYREAKPvZIPV5EQEhoshx0XERAaJI3RAVhREACbg6+zVxEQJuCyjKjXkRAzpCFQ8pZRECre2RzVV1EQE1xC0xdYURAV0lcrpteRECuikcUIF5EQEuTELQbXURA2dOrVJJYREAYMWCHOV9EQCpJKpXoXkRAEYnGA99hREA4KS+mV15EQKL4a5E4YERAGtHqonBXREC6r1YvN1xEQBVk9HGnWkRATAp/yNNcREBf1IstRltEQJVT0CdRXURAv14nFvRdREBuTNOQBl9EQJRtfeSYYERA07NqIZJhREAW6wpshFtEQEt6tS9iYERAwOJ4VyBfREBkKhYiVFpEQKONCjnCXERA5m7kdRVXREBLfh9py15EQNhAwkl9XURAlkV6tGVcREA2epD5219EQNZmjKQXX0RAlUMPpQtcREBT4XQ39GFEQM5gnXRsX0RAzLkUV5VfREDyA7qjvVxEQNy+5NI6W0RAUfrfnb5YRECxeMES1VtEQJx+3MAVYERAV+WlD5tfREAOG36aB11EQOW4MixvWERAc+jjkMNeREAIVP8gkl9EQELnVoTyXkRAS8QALu1ZRED6biUBi1xEQPf3hLIRXURAZaM504BdREAu/tc1MV5EQB68+qHnXkRApyA/G7lcREAH7KwOZ2FEQKLdfH5zX0RAOaVRuz5cREB139aCg19EQAiL7WLYYERA8gdm+fhdREDQzWFr9FlEQKIWWgi4X0RAqLdxUU5hREBaBM5rT1tEQLIOJkmAXURAGWhnZqBYREDRpjSsc2JEQBDM0eP3WERAJjyh159bRECk65mQHF1EQIqZt8msYERATQ9tdAxgREDYDJFP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\",\"dtype\":\"float64\",\"order\":\"little\",\"shape\":[330]},\"lon\":{\"__ndarray__\":\"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\",\"dtype\":\"float64\",\"order\":\"little\",\"shape\":[330]}},\"selected\":{\"id\":\"1045\"},\"selection_policy\":{\"id\":\"1046\"}},\"id\":\"1029\",\"type\":\"ColumnDataSource\"},{\"attributes\":{},\"id\":\"1041\",\"type\":\"LinearScale\"},{\"attributes\":{},\"id\":\"1046\",\"type\":\"UnionRenderers\"},{\"attributes\":{},\"id\":\"1042\",\"type\":\"LinearScale\"},{\"attributes\":{\"lat\":40.736962,\"lng\":-73.978255},\"id\":\"1002\",\"type\":\"GMapOptions\"}],\"root_ids\":[\"1003\"]},\"title\":\"Bokeh Application\",\"version\":\"2.2.3\"}};\n",
       "  var render_items = [{\"docid\":\"0cc7a503-e880-4c43-898c-b6788e0e0200\",\"root_ids\":[\"1003\"],\"roots\":{\"1003\":\"38fc90a5-fcc8-4908-a77d-0f40221276f7\"}}];\n",
       "  root.Bokeh.embed.embed_items_notebook(docs_json, render_items);\n",
       "\n",
       "  }\n",
       "  if (root.Bokeh !== undefined) {\n",
       "    embed_document(root);\n",
       "  } else {\n",
       "    var attempts = 0;\n",
       "    var timer = setInterval(function(root) {\n",
       "      if (root.Bokeh !== undefined) {\n",
       "        clearInterval(timer);\n",
       "        embed_document(root);\n",
       "      } else {\n",
       "        attempts++;\n",
       "        if (attempts > 100) {\n",
       "          clearInterval(timer);\n",
       "          console.log(\"Bokeh: ERROR: Unable to run BokehJS code because BokehJS library is missing\");\n",
       "        }\n",
       "      }\n",
       "    }, 10, root)\n",
       "  }\n",
       "})(window);"
      ],
      "application/vnd.bokehjs_exec.v0+json": ""
     },
     "metadata": {
      "application/vnd.bokehjs_exec.v0+json": {
       "id": "1003"
      }
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "p = plot(locaciones['start station latitude'], locaciones['start station longitude'], [40.736962, -73.978255],  zoom=12)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Ahora vamos a obtener los valores de tiempo por cada par de estaciones."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>start station id</th>\n",
       "      <th>end station id</th>\n",
       "      <th>tripduration</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>72</td>\n",
       "      <td>72</td>\n",
       "      <td>1428</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>72</td>\n",
       "      <td>79</td>\n",
       "      <td>1117</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>72</td>\n",
       "      <td>82</td>\n",
       "      <td>1516</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>72</td>\n",
       "      <td>83</td>\n",
       "      <td>923</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>72</td>\n",
       "      <td>116</td>\n",
       "      <td>824</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>95625</th>\n",
       "      <td>3002</td>\n",
       "      <td>2017</td>\n",
       "      <td>1394</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>95626</th>\n",
       "      <td>3002</td>\n",
       "      <td>2021</td>\n",
       "      <td>797</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>95627</th>\n",
       "      <td>3002</td>\n",
       "      <td>2022</td>\n",
       "      <td>2590</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>95628</th>\n",
       "      <td>3002</td>\n",
       "      <td>2023</td>\n",
       "      <td>3319</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>95629</th>\n",
       "      <td>3002</td>\n",
       "      <td>3002</td>\n",
       "      <td>1077</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>95630 rows × 3 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       start station id  end station id  tripduration\n",
       "0                    72              72          1428\n",
       "1                    72              79          1117\n",
       "2                    72              82          1516\n",
       "3                    72              83           923\n",
       "4                    72             116           824\n",
       "...                 ...             ...           ...\n",
       "95625              3002            2017          1394\n",
       "95626              3002            2021           797\n",
       "95627              3002            2022          2590\n",
       "95628              3002            2023          3319\n",
       "95629              3002            3002          1077\n",
       "\n",
       "[95630 rows x 3 columns]"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "tiempos = datos.groupby(['start station id', 'end station id'])['tripduration'].mean().reset_index()\n",
    "tiempos['tripduration'] = tiempos['tripduration'].astype('int')\n",
    "tiempos"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Registros\n",
    "\n",
    "Vamos a generar una serie de funciones que nos ayuden a obtener los diccionarios que más tarde se subiran a la base de datos:"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Para evitar que el usuario ingrese las coordenadas del lugar donde vive o cualquier otra. Vamos a generar una función que busque por medio de la API de Google la dirección y obtenga la dirección. Podemos generar el mismo proceos a la inversa, a apartir de coordenadas, podemos obtener la dirección."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "import urllib, json\n",
    "import urllib.request\n",
    "def decode_address_to_coordinates(address):\n",
    "        params = {\n",
    "                'address' : address,\n",
    "                'sensor' : 'false',\n",
    "        }  \n",
    "        googleGeocodeUrl = 'https://maps.google.com/maps/api/geocode/json?' \n",
    "        # Radio de 10 kilometros a la redonda desde el centro de manhattan\n",
    "        ubicacion = \"&location=40.736962%2C-73.978255&radius=10000\"\n",
    "        APIKEY = '&key='+'AIzaSyCQJea5VznV2GGbK_cQB_JuGjscgw8SEAs'\n",
    "\n",
    "        url = googleGeocodeUrl + urllib.parse.urlencode(params) + ubicacion + APIKEY\n",
    "        response = urllib.request.urlopen(url)\n",
    "        result = json.load(response)\n",
    "        try:\n",
    "                coor = result['results'][0]['geometry']['location']\n",
    "                return [coor['lat'], coor['lng']]\n",
    "                \n",
    "        except:\n",
    "                return None"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "def decode_coordinates_to_addres(coordinates):\n",
    "        cor = 'latlng='+str(coordinates[0])+'%2C'+str(coordinates[1])\n",
    "        googleGeocodeUrl = 'https://maps.google.com/maps/api/geocode/json?' \n",
    "        APIKEY = '&key='+'AIzaSyCQJea5VznV2GGbK_cQB_JuGjscgw8SEAs'\n",
    "        #https://maps.googleapis.com/maps/api/geocode/json?latlng=44.4647452,7.3553838&key=YOUR_API_KEY\n",
    "        url = googleGeocodeUrl + cor + APIKEY\n",
    "        response = urllib.request.urlopen(url)\n",
    "        result = json.load(response)\n",
    "        \n",
    "        try:\n",
    "                dir = result['results'][0]['address_components'][0]['short_name'] + ',' + ' ' + result['results'][0]['address_components'][1]['short_name'] + ',' + ' ' + result['results'][0]['address_components'][2]['short_name']\n",
    "                return dir\n",
    "                \n",
    "        except:\n",
    "                return None"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'ubicacion_2d'"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def registro(id):\n",
    "    dictionary = {}\n",
    "    aux = tiempos[tiempos['start station id'] == id]\n",
    "    for j in aux.index:\n",
    "        dictionary[str(aux.loc[j,'end station id'])] = int(aux.loc[j,'tripduration'])\n",
    "    loc = locaciones[locaciones['start station id'] == id]\n",
    "    reg = {'estacion': str(id), 'ubicacion': [loc.iloc[0,1], loc.iloc[0,2]], 'tiempos':dictionary}\n",
    "    coleccion_tiempos.insert_one(reg)\n",
    "\n",
    "for id in locaciones['start station id']:\n",
    "    registro(id)\n",
    "\n",
    "coleccion_tiempos.create_index([(\"ubicacion\", GEO2D)])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "def registra_usuario(nombre, apellidos, lugar, coordenadas):\n",
    "    try:\n",
    "        id = list(usuarios.aggregate([{'$group':{'_id':None, 'max':{'$max':\"$_id\"}}}]))[0]['max'] + 1\n",
    "    except:\n",
    "        id = 1\n",
    "    reg = {'_id':id, 'nombre': nombre, 'apellidos': apellidos, lugar: coordenadas}\n",
    "    usuarios.insert_one(reg)\n",
    "    return id"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "def agrega_ubicacion(id, lugar, coordenadas):\n",
    "    usuarios.update_one({'_id': id}, {'$set': {lugar: coordenadas}})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [],
   "source": [
    "def cercanas(id, lugar, limite):\n",
    "    lug = list(usuarios.find({'_id':id}))[0][lugar]\n",
    "    consulta = list(coleccion_tiempos.find({\"ubicacion\": {\"$near\": lug}}).limit(limite))\n",
    "    estaciones = []\n",
    "    ubicaciones = []\n",
    "    lat = []\n",
    "    long = []\n",
    "    for i in range(limite):\n",
    "        print(str(i) + ' - ' + str(consulta[i]['estacion']) + ' - ' + str(decode_coordinates_to_addres(consulta[i]['ubicacion'])))\n",
    "        lat.append(consulta[i]['ubicacion'][0])\n",
    "        long.append(consulta[i]['ubicacion'][1])\n",
    "        estaciones.append(consulta[i]['estacion'])\n",
    "        ubicaciones.append(consulta[i]['ubicacion'])\n",
    "    \n",
    "    p = plot(lat, long, lug, zoom=14)\n",
    "    return p"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [],
   "source": [
    "def cercanas_listado(id, lugar, limite):\n",
    "    lug = list(usuarios.find({'_id':id}))[0][lugar]\n",
    "    consulta = list(coleccion_tiempos.find({\"ubicacion\": {\"$near\": lug}}).limit(limite))\n",
    "    estaciones = []\n",
    "    ubicaciones = []\n",
    "    for i in range(limite):\n",
    "        print(str(i) + ' - ' + str(consulta[i]['estacion']) + ' - ' + str(decode_coordinates_to_addres(consulta[i]['ubicacion'])))\n",
    "        estaciones.append(consulta[i]['estacion'])\n",
    "        ubicaciones.append(consulta[i]['ubicacion'])\n",
    "    \n",
    "    return estaciones, ubicaciones"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [],
   "source": [
    "def ruta(punto_inicio, puntos_finales):\n",
    "    #now = datetime.now()\n",
    "\n",
    "    start =(punto_inicio[0], punto_inicio[1])\n",
    "\n",
    "    #configure api\n",
    "    gmaps.configure(api_key)\n",
    "\n",
    "    #Create the map\n",
    "    fig = gmaps.figure(layout={\n",
    "            'width': '400px',\n",
    "            'height': '600px',\n",
    "            'padding': '3px',\n",
    "            'border': '1px solid black'\n",
    "    })\n",
    "    #create the layer\n",
    "\n",
    "    for i in puntos_finales:\n",
    "        end = (i[0], i[1])\n",
    "        layer = gmaps.directions.Directions(start, end,optimize_waypoints=True,\n",
    "                                                mode='bicycling',api_key=api_key)\n",
    "        #Add the layer\n",
    "        fig.add_layer(layer)\n",
    "    #fig.add_layer(gmaps.traffic_layer())\n",
    "    return display(fig)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "d9db44f224e74170989211c85d531906",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Figure(layout=FigureLayout(border='1px solid black', height='600px', padding='3px', width='400px'))"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "ruta([40.75323098, -73.97032517], [[40.714215, -73.981346]])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [],
   "source": [
    "def viaje_lugar(id, tiempo, lugar, redondo=False):\n",
    "    inicio = cercanas_listado(id, lugar, 1)[0][0]\n",
    "    ubi_inicio = list(coleccion_tiempos.find({'estacion':inicio}))[0]['ubicacion']\n",
    "    if redondo:\n",
    "        min_ = tiempo/2 - 90\n",
    "        max_ = tiempo/2 + 90\n",
    "    else:\n",
    "        min_ = tiempo - 180\n",
    "        max_ = tiempo + 180\n",
    "    times = list(coleccion_tiempos.find({'estacion':inicio}))[0]['tiempos']\n",
    "    seleccion = [k for k, v in times.items() if v > min_ and v < max_]\n",
    "    \n",
    "    if len(seleccion) == 0:\n",
    "        return 'Tiempo muy corto'\n",
    "    \n",
    "    ubi_seleccion = []\n",
    "    for i in range(len(seleccion)):\n",
    "        ubi_seleccion.append(list(coleccion_tiempos.find({'estacion':seleccion[i]}))[0]['ubicacion'])\n",
    "\n",
    "    return ruta(ubi_inicio, ubi_seleccion)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [],
   "source": [
    "def viaje_punto(tiempo, estacion, redondo=False):\n",
    "    inicio = estacion\n",
    "    ubi_inicio = list(coleccion_tiempos.find({'estacion':inicio}))[0]['ubicacion']\n",
    "    if redondo:\n",
    "        min_ = tiempo/2 - 90\n",
    "        max_ = tiempo/2 + 90\n",
    "    else:\n",
    "        min_ = tiempo - 180\n",
    "        max_ = tiempo + 180\n",
    "    times = list(coleccion_tiempos.find({'estacion':str(estacion)}))[0]['tiempos']\n",
    "    seleccion = [k for k, v in times.items() if v > min_ and v < max_]\n",
    "    \n",
    "    if len(seleccion) == 0:\n",
    "        return 'Tiempo muy corto'\n",
    "    \n",
    "    ubi_seleccion = []\n",
    "    for i in range(len(seleccion)):\n",
    "        ubi_seleccion.append(list(coleccion_tiempos.find({'estacion':seleccion[i]}))[0]['ubicacion'])\n",
    "    \n",
    "    return ruta(ubi_inicio, ubi_seleccion)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [],
   "source": [
    "def principal():\n",
    "    tiene_cuenta = input('Bienvenido, ¿Tiene una cuenta? (escriba Si o No) ')\n",
    "    if tiene_cuenta == 'No':\n",
    "        nombre = input('Ingrese su nombre: ')\n",
    "        apellido = input('Ingrese su(s) apellido(s): ')\n",
    "        lugar = input('Ingrese el nombre de un lugar: ')\n",
    "        address = input('Ingrese la dirección de ese lugar: ')\n",
    "        coordenadas = decode_address_to_coordinates(address)\n",
    "        #coordenadas = list(map(float, coordenadas.split(',')))\n",
    "        assert len(coordenadas) == 2, 'Ingreso de dirección inválida'\n",
    "        assert coordenadas[0] >= -90 and coordenadas[0] <= 90 and coordenadas[1] >= -180 and coordenadas[1] <= 180, 'Rango de coordenadas incorrecto'\n",
    "        \n",
    "        id = registra_usuario(nombre, apellido, lugar, coordenadas)\n",
    "        \n",
    "        return 'Usted se ha registrado, su id de usuario es: ' + str(id)\n",
    "    if tiene_cuenta == 'Si':\n",
    "        id = int(input('Ingrese su id de usuario: '))\n",
    "        assert len(list(usuarios.find({'_id':id}))) != 0, 'Id no registrado'\n",
    "        accion = input('Ingrese: \\n 1. si desea agregar un nuevo lugar \\n 2. si desea hacer una consulta \\n')\n",
    "        if accion == '1':\n",
    "            lugar = input('Ingrese el nombre de un lugar: ')\n",
    "            address = input('Ingrese la direccion de ese lugar: ')\n",
    "            coordenadas = decode_address_to_coordinates(address)\n",
    "            #coordenadas = list(map(float, coordenadas.split(',')))\n",
    "            assert len(coordenadas) == 2, 'Ingreso de direccion inválida'\n",
    "            assert coordenadas[0] >= -90 and coordenadas[0] <= 90 and coordenadas[1] >= -180 and coordenadas[1] <= 180, 'Rango de coordenadas incorrecto'\n",
    "            agrega_ubicacion(id, lugar, coordenadas)\n",
    "            return 'Lugar ingresado correctamente'\n",
    "        if accion == '2':\n",
    "            tipo_consulta = input('Ingrese: \\n 1. para saber las estaciones cercanas a tus lugares \\n 2. para planear un paseo \\n')\n",
    "            if tipo_consulta == '1':\n",
    "                lugares = list(list(usuarios.find({'_id':id}))[0].keys())[3:]\n",
    "                cadena = 'Ingresa el número de acuerdo al lugar del que quieres saber las estaciones cercanas: \\n'\n",
    "                for i, l in enumerate(lugares):\n",
    "                    cadena = cadena + str(i) + ' - ' + l + '\\n'\n",
    "                lugar_index = input(cadena)\n",
    "                limite = input('¿Cuántas estaciones quieres ver? ')\n",
    "                return cercanas(id, lugares[int(lugar_index)], int(limite))\n",
    "            if tipo_consulta == '2':\n",
    "                tiempo = int(input('¿Cuántos minutos quieres que dure el paseo? '))*60\n",
    "                redondo = input('¿Quieres que el viaje sea redondo? (Responde Si o No) ')\n",
    "                if redondo == 'Si':\n",
    "                    redondo = True\n",
    "                if redondo == 'No':\n",
    "                    redondo == False\n",
    "                modalidad = input('Salir desde: \\n 1: una estación cercana a algún lugar pre-guardado \\n 2: una estación en específico \\n')\n",
    "                if modalidad == '1':\n",
    "                    lugares = list(list(usuarios.find({'_id':id}))[0].keys())[3:]\n",
    "                    cadena = '¿Desde qué lugar? \\n'\n",
    "                    for i, l in enumerate(lugares):\n",
    "                        cadena = cadena + str(i) + ' - ' + l + '\\n'\n",
    "                    lugar_index = input(cadena)\n",
    "                    return viaje_lugar(id, tiempo, lugares[int(lugar_index)], redondo)\n",
    "                if modalidad == '2':\n",
    "                    estacion = input('Ingresa el número de estación del que quieres salir ')\n",
    "                    assert len(list(coleccion_tiempos.find({'estacion':str(estacion)}))) != 0, 'Estación inexistente'\n",
    "                    return viaje_punto(tiempo, estacion, redondo)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>_id</th>\n",
       "      <th>estacion</th>\n",
       "      <th>ubicacion</th>\n",
       "      <th>tiempos</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>62732804f9a393887f549ed3</td>\n",
       "      <td>164</td>\n",
       "      <td>[40.75323098, -73.97032517]</td>\n",
       "      <td>{'72': 861, '79': 1487, '82': 1652, '83': 2012...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>62732804f9a393887f549ed4</td>\n",
       "      <td>388</td>\n",
       "      <td>[40.749717753, -74.002950346]</td>\n",
       "      <td>{'72': 1049, '79': 1211, '82': 3269, '83': 438...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>62732804f9a393887f549ed5</td>\n",
       "      <td>293</td>\n",
       "      <td>[40.73028666, -73.9907647]</td>\n",
       "      <td>{'72': 1224, '79': 991, '82': 951, '83': 1099,...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>62732804f9a393887f549ed6</td>\n",
       "      <td>531</td>\n",
       "      <td>[40.71893904, -73.99266288]</td>\n",
       "      <td>{'72': 959, '79': 1415, '82': 818, '83': 1690,...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>62732804f9a393887f549ed7</td>\n",
       "      <td>382</td>\n",
       "      <td>[40.73492695, -73.99200509]</td>\n",
       "      <td>{'72': 761, '79': 932, '82': 1118, '83': 788, ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>325</th>\n",
       "      <td>62732807f9a393887f54a018</td>\n",
       "      <td>372</td>\n",
       "      <td>[40.694528000000005, -73.958089]</td>\n",
       "      <td>{'72': 1347, '82': 1264, '83': 1436, '116': 25...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>326</th>\n",
       "      <td>62732807f9a393887f54a019</td>\n",
       "      <td>119</td>\n",
       "      <td>[40.69608941, -73.97803415]</td>\n",
       "      <td>{'82': 1027, '83': 1786, '119': 452, '120': 69...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>327</th>\n",
       "      <td>62732807f9a393887f54a01a</td>\n",
       "      <td>2017</td>\n",
       "      <td>[40.75022392, -73.97121414]</td>\n",
       "      <td>{'72': 897, '79': 1378, '82': 1861, '83': 1996...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>328</th>\n",
       "      <td>62732807f9a393887f54a01b</td>\n",
       "      <td>2010</td>\n",
       "      <td>[40.72165481, -74.00234737]</td>\n",
       "      <td>{'72': 1301, '79': 544, '82': 748, '83': 1324,...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>329</th>\n",
       "      <td>62732807f9a393887f54a01c</td>\n",
       "      <td>502</td>\n",
       "      <td>[40.714215, -73.981346]</td>\n",
       "      <td>{'72': 1161, '79': 972, '82': 1009, '83': 1400...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>330 rows × 4 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                          _id estacion                         ubicacion  \\\n",
       "0    62732804f9a393887f549ed3      164       [40.75323098, -73.97032517]   \n",
       "1    62732804f9a393887f549ed4      388     [40.749717753, -74.002950346]   \n",
       "2    62732804f9a393887f549ed5      293        [40.73028666, -73.9907647]   \n",
       "3    62732804f9a393887f549ed6      531       [40.71893904, -73.99266288]   \n",
       "4    62732804f9a393887f549ed7      382       [40.73492695, -73.99200509]   \n",
       "..                        ...      ...                               ...   \n",
       "325  62732807f9a393887f54a018      372  [40.694528000000005, -73.958089]   \n",
       "326  62732807f9a393887f54a019      119       [40.69608941, -73.97803415]   \n",
       "327  62732807f9a393887f54a01a     2017       [40.75022392, -73.97121414]   \n",
       "328  62732807f9a393887f54a01b     2010       [40.72165481, -74.00234737]   \n",
       "329  62732807f9a393887f54a01c      502           [40.714215, -73.981346]   \n",
       "\n",
       "                                               tiempos  \n",
       "0    {'72': 861, '79': 1487, '82': 1652, '83': 2012...  \n",
       "1    {'72': 1049, '79': 1211, '82': 3269, '83': 438...  \n",
       "2    {'72': 1224, '79': 991, '82': 951, '83': 1099,...  \n",
       "3    {'72': 959, '79': 1415, '82': 818, '83': 1690,...  \n",
       "4    {'72': 761, '79': 932, '82': 1118, '83': 788, ...  \n",
       "..                                                 ...  \n",
       "325  {'72': 1347, '82': 1264, '83': 1436, '116': 25...  \n",
       "326  {'82': 1027, '83': 1786, '119': 452, '120': 69...  \n",
       "327  {'72': 897, '79': 1378, '82': 1861, '83': 1996...  \n",
       "328  {'72': 1301, '79': 544, '82': 748, '83': 1324,...  \n",
       "329  {'72': 1161, '79': 972, '82': 1009, '83': 1400...  \n",
       "\n",
       "[330 rows x 4 columns]"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pd.DataFrame(list(coleccion_tiempos.find()))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "6"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Vamos a agregar algunos usuarios:\n",
    "registra_usuario('Hugo', 'Rangel', 'casa', [40.767391, -73.987181])\n",
    "registra_usuario('Kike', 'Gomez', 'trabajo', [40.717355, -73.987714])\n",
    "registra_usuario('Daniel', 'Fragoso', 'escuela', [40.710589, -73.967630])\n",
    "registra_usuario('Taylor', 'Swift', 'trabajo', [40.746184, -73.986384])\n",
    "registra_usuario('Jack', 'Antonof', 'trabajo', [40.746184, -73.986384])\n",
    "registra_usuario('Lady', 'Gaga', 'casa', [40.744911, -73.998984])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [],
   "source": [
    "agrega_ubicacion(1, 'escuela', [40.695,-73.0])\n",
    "agrega_ubicacion(2, 'escuela', [40.695,-73.0])\n",
    "agrega_ubicacion(1, 'casa2', [41,-73.5])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>_id</th>\n",
       "      <th>nombre</th>\n",
       "      <th>apellidos</th>\n",
       "      <th>casa</th>\n",
       "      <th>escuela</th>\n",
       "      <th>casa2</th>\n",
       "      <th>trabajo</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>Hugo</td>\n",
       "      <td>Rangel</td>\n",
       "      <td>[40.767391, -73.987181]</td>\n",
       "      <td>[40.695, -73.0]</td>\n",
       "      <td>[41, -73.5]</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>Kike</td>\n",
       "      <td>Gomez</td>\n",
       "      <td>NaN</td>\n",
       "      <td>[40.695, -73.0]</td>\n",
       "      <td>NaN</td>\n",
       "      <td>[40.717355, -73.987714]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>Daniel</td>\n",
       "      <td>Fragoso</td>\n",
       "      <td>NaN</td>\n",
       "      <td>[40.710589, -73.96763]</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>Taylor</td>\n",
       "      <td>Swift</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>[40.746184, -73.986384]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>Jack</td>\n",
       "      <td>Antonof</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>[40.746184, -73.986384]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>6</td>\n",
       "      <td>Lady</td>\n",
       "      <td>Gaga</td>\n",
       "      <td>[40.744911, -73.998984]</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   _id  nombre apellidos                     casa                 escuela  \\\n",
       "0    1    Hugo    Rangel  [40.767391, -73.987181]         [40.695, -73.0]   \n",
       "1    2    Kike     Gomez                      NaN         [40.695, -73.0]   \n",
       "2    3  Daniel   Fragoso                      NaN  [40.710589, -73.96763]   \n",
       "3    4  Taylor     Swift                      NaN                     NaN   \n",
       "4    5    Jack   Antonof                      NaN                     NaN   \n",
       "5    6    Lady      Gaga  [40.744911, -73.998984]                     NaN   \n",
       "\n",
       "         casa2                  trabajo  \n",
       "0  [41, -73.5]                      NaN  \n",
       "1          NaN  [40.717355, -73.987714]  \n",
       "2          NaN                      NaN  \n",
       "3          NaN  [40.746184, -73.986384]  \n",
       "4          NaN  [40.746184, -73.986384]  \n",
       "5          NaN                      NaN  "
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pd.DataFrame(list(usuarios.find()))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Consultas"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Bienvenido, ¿Tiene una cuenta? (escriba Si o No) No\n",
      "Ingrese su nombre: Jake\n",
      "Ingrese su(s) apellido(s): Gyllenhaal\n",
      "Ingrese el nombre de un lugar: casa\n",
      "Ingrese la dirección de ese lugar: 443 Greenwich\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "'Usted se ha registrado, su id de usuario es: 7'"
      ]
     },
     "execution_count": 47,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 1. Registro de un nuevo usuario:\n",
    "principal()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>_id</th>\n",
       "      <th>nombre</th>\n",
       "      <th>apellidos</th>\n",
       "      <th>casa</th>\n",
       "      <th>escuela</th>\n",
       "      <th>casa2</th>\n",
       "      <th>trabajo</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>Hugo</td>\n",
       "      <td>Rangel</td>\n",
       "      <td>[40.767391, -73.987181]</td>\n",
       "      <td>[40.695, -73.0]</td>\n",
       "      <td>[41, -73.5]</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>Kike</td>\n",
       "      <td>Gomez</td>\n",
       "      <td>NaN</td>\n",
       "      <td>[40.695, -73.0]</td>\n",
       "      <td>NaN</td>\n",
       "      <td>[40.717355, -73.987714]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>Daniel</td>\n",
       "      <td>Fragoso</td>\n",
       "      <td>NaN</td>\n",
       "      <td>[40.710589, -73.96763]</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>Taylor</td>\n",
       "      <td>Swift</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>[40.746184, -73.986384]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>Jack</td>\n",
       "      <td>Antonof</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>[40.746184, -73.986384]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>6</td>\n",
       "      <td>Lady</td>\n",
       "      <td>Gaga</td>\n",
       "      <td>[40.744911, -73.998984]</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>7</td>\n",
       "      <td>Jake</td>\n",
       "      <td>Gyllenhaal</td>\n",
       "      <td>[40.7228796, -74.00948]</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   _id  nombre   apellidos                     casa                 escuela  \\\n",
       "0    1    Hugo      Rangel  [40.767391, -73.987181]         [40.695, -73.0]   \n",
       "1    2    Kike       Gomez                      NaN         [40.695, -73.0]   \n",
       "2    3  Daniel     Fragoso                      NaN  [40.710589, -73.96763]   \n",
       "3    4  Taylor       Swift                      NaN                     NaN   \n",
       "4    5    Jack     Antonof                      NaN                     NaN   \n",
       "5    6    Lady        Gaga  [40.744911, -73.998984]                     NaN   \n",
       "6    7    Jake  Gyllenhaal  [40.7228796, -74.00948]                     NaN   \n",
       "\n",
       "         casa2                  trabajo  \n",
       "0  [41, -73.5]                      NaN  \n",
       "1          NaN  [40.717355, -73.987714]  \n",
       "2          NaN                      NaN  \n",
       "3          NaN  [40.746184, -73.986384]  \n",
       "4          NaN  [40.746184, -73.986384]  \n",
       "5          NaN                      NaN  \n",
       "6          NaN                      NaN  "
      ]
     },
     "execution_count": 48,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pd.DataFrame(list(usuarios.find()))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Bienvenido, ¿Tiene una cuenta? (escriba Si o No) Si\n",
      "Ingrese su id de usuario: 4\n",
      "Ingrese: \n",
      " 1. si desea agregar un nuevo lugar \n",
      " 2. si desea hacer una consulta \n",
      "1\n",
      "Ingrese el nombre de un lugar: casa\n",
      "Ingrese la direccion de ese lugar: 153 Franklin St\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "'Lugar ingresado correctamente'"
      ]
     },
     "execution_count": 49,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 2. Agregar un nuevo lugar\n",
    "principal()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>_id</th>\n",
       "      <th>nombre</th>\n",
       "      <th>apellidos</th>\n",
       "      <th>casa</th>\n",
       "      <th>escuela</th>\n",
       "      <th>casa2</th>\n",
       "      <th>trabajo</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>Hugo</td>\n",
       "      <td>Rangel</td>\n",
       "      <td>[40.767391, -73.987181]</td>\n",
       "      <td>[40.695, -73.0]</td>\n",
       "      <td>[41, -73.5]</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>Kike</td>\n",
       "      <td>Gomez</td>\n",
       "      <td>NaN</td>\n",
       "      <td>[40.695, -73.0]</td>\n",
       "      <td>NaN</td>\n",
       "      <td>[40.717355, -73.987714]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>Daniel</td>\n",
       "      <td>Fragoso</td>\n",
       "      <td>NaN</td>\n",
       "      <td>[40.710589, -73.96763]</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>Taylor</td>\n",
       "      <td>Swift</td>\n",
       "      <td>[40.7190692, -74.0079207]</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>[40.746184, -73.986384]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>Jack</td>\n",
       "      <td>Antonof</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>[40.746184, -73.986384]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>6</td>\n",
       "      <td>Lady</td>\n",
       "      <td>Gaga</td>\n",
       "      <td>[40.744911, -73.998984]</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>7</td>\n",
       "      <td>Jake</td>\n",
       "      <td>Gyllenhaal</td>\n",
       "      <td>[40.7228796, -74.00948]</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   _id  nombre   apellidos                       casa                 escuela  \\\n",
       "0    1    Hugo      Rangel    [40.767391, -73.987181]         [40.695, -73.0]   \n",
       "1    2    Kike       Gomez                        NaN         [40.695, -73.0]   \n",
       "2    3  Daniel     Fragoso                        NaN  [40.710589, -73.96763]   \n",
       "3    4  Taylor       Swift  [40.7190692, -74.0079207]                     NaN   \n",
       "4    5    Jack     Antonof                        NaN                     NaN   \n",
       "5    6    Lady        Gaga    [40.744911, -73.998984]                     NaN   \n",
       "6    7    Jake  Gyllenhaal    [40.7228796, -74.00948]                     NaN   \n",
       "\n",
       "         casa2                  trabajo  \n",
       "0  [41, -73.5]                      NaN  \n",
       "1          NaN  [40.717355, -73.987714]  \n",
       "2          NaN                      NaN  \n",
       "3          NaN  [40.746184, -73.986384]  \n",
       "4          NaN  [40.746184, -73.986384]  \n",
       "5          NaN                      NaN  \n",
       "6          NaN                      NaN  "
      ]
     },
     "execution_count": 50,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pd.DataFrame(list(usuarios.find()))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "2. El usuario debe poder buscar las estaciones de bicicleta que le\n",
    "queden más cerca a sus lugares."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Bienvenido, ¿Tiene una cuenta? (escriba Si o No) Si\n",
      "Ingrese su id de usuario: 4\n",
      "Ingrese: \n",
      " 1. si desea agregar un nuevo lugar \n",
      " 2. si desea hacer una consulta \n",
      "2\n",
      "Ingrese: \n",
      " 1. para saber las estaciones cercanas a tus lugares \n",
      " 2. para planear un paseo \n",
      "1\n",
      "Ingresa el número de acuerdo al lugar del que quieres saber las estaciones cercanas: \n",
      "0 - trabajo\n",
      "1 - casa\n",
      "1\n",
      "¿Cuántas estaciones quieres ver? 5\n",
      "0 - 249 - Harrison St/Hudson St, Manhattan, New York\n",
      "1 - 79 - Franklin Street Station, Manhattan, New York\n",
      "2 - 320 - 241, Church St, Manhattan\n",
      "3 - 329 - 380, Greenwich St, Manhattan\n",
      "4 - 248 - # 1A, 38, Laight St\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "\n",
       "\n",
       "\n",
       "\n",
       "\n",
       "\n",
       "  <div class=\"bk-root\" id=\"e38c140d-95fd-472d-8a21-8886b0349ea5\" data-root-id=\"1298\"></div>\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/javascript": [
       "(function(root) {\n",
       "  function embed_document(root) {\n",
       "    \n",
       "  var docs_json = {\"4a2b2371-2257-45e4-adfa-3f21e807f350\":{\"roots\":{\"references\":[{\"attributes\":{\"api_key\":\"QUl6YVN5Q1FKZWE1VnpuVjJHR2JLX2NRQl9KdUdqc2NndzhTRUFz\",\"below\":[{\"id\":\"1307\"}],\"left\":[{\"id\":\"1312\"}],\"map_options\":{\"id\":\"1297\"},\"plot_height\":500,\"renderers\":[{\"id\":\"1328\"},{\"id\":\"1333\"}],\"title\":{\"id\":\"1299\"},\"toolbar\":{\"id\":\"1319\"},\"x_range\":{\"id\":\"1300\"},\"x_scale\":{\"id\":\"1357\"},\"y_range\":{\"id\":\"1301\"},\"y_scale\":{\"id\":\"1358\"}},\"id\":\"1298\",\"subtype\":\"GMap\",\"type\":\"GMapPlot\"},{\"attributes\":{},\"id\":\"1301\",\"type\":\"Range1d\"},{\"attributes\":{\"formatter\":{\"id\":\"1305\"},\"ticker\":{\"id\":\"1306\"}},\"id\":\"1307\",\"type\":\"LinearAxis\"},{\"attributes\":{},\"id\":\"1361\",\"type\":\"Selection\"},{\"attributes\":{},\"id\":\"1357\",\"type\":\"LinearScale\"},{\"attributes\":{},\"id\":\"1300\",\"type\":\"Range1d\"},{\"attributes\":{\"data\":{\"index\":[0,1,2,3,4],\"lat\":{\"__ndarray__\":\"MHtdr/5bREAYOTT6C1xEQLF4wRLVW0RAuq9WLzdcRECWRXq0ZVxEQA==\",\"dtype\":\"float64\",\"order\":\"little\",\"shape\":[5]},\"lon\":{\"__ndarray__\":\"nciCeJOAUsA2+8k5bYBSwIsbt5hfgFLASLFxN6eAUsBv6cFyfoBSwA==\",\"dtype\":\"float64\",\"order\":\"little\",\"shape\":[5]}},\"selected\":{\"id\":\"1361\"},\"selection_policy\":{\"id\":\"1362\"}},\"id\":\"1324\",\"type\":\"ColumnDataSource\"},{\"attributes\":{},\"id\":\"1358\",\"type\":\"LinearScale\"},{\"attributes\":{\"callback\":null},\"id\":\"1315\",\"type\":\"HoverTool\"},{\"attributes\":{},\"id\":\"1362\",\"type\":\"UnionRenderers\"},{\"attributes\":{\"dimension\":\"lat\"},\"id\":\"1310\",\"type\":\"MercatorTickFormatter\"},{\"attributes\":{\"dimension\":\"lat\"},\"id\":\"1311\",\"type\":\"MercatorTicker\"},{\"attributes\":{\"dimension\":\"lon\"},\"id\":\"1305\",\"type\":\"MercatorTickFormatter\"},{\"attributes\":{\"text\":\"Ubicaciones\"},\"id\":\"1299\",\"type\":\"Title\"},{\"attributes\":{},\"id\":\"1359\",\"type\":\"Selection\"},{\"attributes\":{\"active_drag\":\"auto\",\"active_inspect\":\"auto\",\"active_multi\":null,\"active_scroll\":\"auto\",\"active_tap\":\"auto\",\"tools\":[{\"id\":\"1315\"},{\"id\":\"1316\"},{\"id\":\"1317\"},{\"id\":\"1318\"}]},\"id\":\"1319\",\"type\":\"Toolbar\"},{\"attributes\":{\"dimension\":\"lon\"},\"id\":\"1306\",\"type\":\"MercatorTicker\"},{\"attributes\":{\"lat\":40.7190692,\"lng\":-74.0079207,\"zoom\":14},\"id\":\"1297\",\"type\":\"GMapOptions\"},{\"attributes\":{\"source\":{\"id\":\"1324\"}},\"id\":\"1334\",\"type\":\"CDSView\"},{\"attributes\":{\"fill_alpha\":{\"value\":0.1},\"fill_color\":{\"value\":\"red\"},\"line_alpha\":{\"value\":0.1},\"line_color\":{\"value\":\"red\"},\"size\":{\"units\":\"screen\",\"value\":14},\"x\":{\"field\":\"x\"},\"y\":{\"field\":\"y\"}},\"id\":\"1327\",\"type\":\"Circle\"},{\"attributes\":{},\"id\":\"1318\",\"type\":\"PanTool\"},{\"attributes\":{},\"id\":\"1316\",\"type\":\"ResetTool\"},{\"attributes\":{\"fill_color\":{\"value\":\"#3F33FF\"},\"line_color\":{\"value\":\"#3F33FF\"},\"size\":{\"units\":\"screen\",\"value\":10},\"x\":{\"field\":\"lon\"},\"y\":{\"field\":\"lat\"}},\"id\":\"1331\",\"type\":\"Circle\"},{\"attributes\":{},\"id\":\"1317\",\"type\":\"WheelZoomTool\"},{\"attributes\":{\"fill_color\":{\"value\":\"red\"},\"line_color\":{\"value\":\"red\"},\"size\":{\"units\":\"screen\",\"value\":14},\"x\":{\"field\":\"x\"},\"y\":{\"field\":\"y\"}},\"id\":\"1326\",\"type\":\"Circle\"},{\"attributes\":{\"data\":{\"x\":[-74.0079207],\"y\":[40.7190692]},\"selected\":{\"id\":\"1359\"},\"selection_policy\":{\"id\":\"1360\"}},\"id\":\"1325\",\"type\":\"ColumnDataSource\"},{\"attributes\":{\"formatter\":{\"id\":\"1310\"},\"ticker\":{\"id\":\"1311\"}},\"id\":\"1312\",\"type\":\"LinearAxis\"},{\"attributes\":{\"fill_alpha\":{\"value\":0.1},\"fill_color\":{\"value\":\"#3F33FF\"},\"line_alpha\":{\"value\":0.1},\"line_color\":{\"value\":\"#3F33FF\"},\"size\":{\"units\":\"screen\",\"value\":10},\"x\":{\"field\":\"lon\"},\"y\":{\"field\":\"lat\"}},\"id\":\"1332\",\"type\":\"Circle\"},{\"attributes\":{\"data_source\":{\"id\":\"1324\"},\"glyph\":{\"id\":\"1331\"},\"hover_glyph\":null,\"muted_glyph\":null,\"nonselection_glyph\":{\"id\":\"1332\"},\"selection_glyph\":null,\"view\":{\"id\":\"1334\"}},\"id\":\"1333\",\"type\":\"GlyphRenderer\"},{\"attributes\":{},\"id\":\"1360\",\"type\":\"UnionRenderers\"},{\"attributes\":{\"source\":{\"id\":\"1325\"}},\"id\":\"1329\",\"type\":\"CDSView\"},{\"attributes\":{\"data_source\":{\"id\":\"1325\"},\"glyph\":{\"id\":\"1326\"},\"hover_glyph\":null,\"muted_glyph\":null,\"nonselection_glyph\":{\"id\":\"1327\"},\"selection_glyph\":null,\"view\":{\"id\":\"1329\"}},\"id\":\"1328\",\"type\":\"GlyphRenderer\"}],\"root_ids\":[\"1298\"]},\"title\":\"Bokeh Application\",\"version\":\"2.2.3\"}};\n",
       "  var render_items = [{\"docid\":\"4a2b2371-2257-45e4-adfa-3f21e807f350\",\"root_ids\":[\"1298\"],\"roots\":{\"1298\":\"e38c140d-95fd-472d-8a21-8886b0349ea5\"}}];\n",
       "  root.Bokeh.embed.embed_items_notebook(docs_json, render_items);\n",
       "\n",
       "  }\n",
       "  if (root.Bokeh !== undefined) {\n",
       "    embed_document(root);\n",
       "  } else {\n",
       "    var attempts = 0;\n",
       "    var timer = setInterval(function(root) {\n",
       "      if (root.Bokeh !== undefined) {\n",
       "        clearInterval(timer);\n",
       "        embed_document(root);\n",
       "      } else {\n",
       "        attempts++;\n",
       "        if (attempts > 100) {\n",
       "          clearInterval(timer);\n",
       "          console.log(\"Bokeh: ERROR: Unable to run BokehJS code because BokehJS library is missing\");\n",
       "        }\n",
       "      }\n",
       "    }, 10, root)\n",
       "  }\n",
       "})(window);"
      ],
      "application/vnd.bokehjs_exec.v0+json": ""
     },
     "metadata": {
      "application/vnd.bokehjs_exec.v0+json": {
       "id": "1298"
      }
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div style=\"display: table;\"><div style=\"display: table-row;\"><div style=\"display: table-cell;\"><b title=\"bokeh.plotting.gmap.GMap\">GMap</b>(</div><div style=\"display: table-cell;\">id&nbsp;=&nbsp;'1298', <span id=\"1407\" style=\"cursor: pointer;\">&hellip;)</span></div></div><div class=\"1406\" style=\"display: none;\"><div style=\"display: table-cell;\"></div><div style=\"display: table-cell;\">above&nbsp;=&nbsp;[],</div></div><div class=\"1406\" style=\"display: none;\"><div style=\"display: table-cell;\"></div><div style=\"display: table-cell;\">align&nbsp;=&nbsp;'start',</div></div><div class=\"1406\" style=\"display: none;\"><div style=\"display: table-cell;\"></div><div style=\"display: table-cell;\">api_key&nbsp;=&nbsp;'QUl6YVN5Q1FKZWE1VnpuVjJHR2JLX2NRQl9KdUdqc2NndzhTRUFz',</div></div><div class=\"1406\" style=\"display: none;\"><div style=\"display: table-cell;\"></div><div style=\"display: table-cell;\">aspect_ratio&nbsp;=&nbsp;None,</div></div><div class=\"1406\" style=\"display: none;\"><div style=\"display: table-cell;\"></div><div style=\"display: table-cell;\">aspect_scale&nbsp;=&nbsp;1,</div></div><div class=\"1406\" style=\"display: none;\"><div style=\"display: table-cell;\"></div><div style=\"display: table-cell;\">background&nbsp;=&nbsp;None,</div></div><div class=\"1406\" style=\"display: none;\"><div style=\"display: table-cell;\"></div><div style=\"display: table-cell;\">background_fill_alpha&nbsp;=&nbsp;1.0,</div></div><div class=\"1406\" style=\"display: none;\"><div style=\"display: table-cell;\"></div><div style=\"display: table-cell;\">background_fill_color&nbsp;=&nbsp;'#ffffff',</div></div><div class=\"1406\" style=\"display: none;\"><div style=\"display: table-cell;\"></div><div style=\"display: table-cell;\">below&nbsp;=&nbsp;[LinearAxis(id='1307', ...)],</div></div><div class=\"1406\" style=\"display: none;\"><div style=\"display: table-cell;\"></div><div style=\"display: table-cell;\">border_fill_alpha&nbsp;=&nbsp;1.0,</div></div><div class=\"1406\" style=\"display: none;\"><div style=\"display: table-cell;\"></div><div style=\"display: table-cell;\">border_fill_color&nbsp;=&nbsp;'#ffffff',</div></div><div class=\"1406\" style=\"display: none;\"><div style=\"display: table-cell;\"></div><div style=\"display: table-cell;\">center&nbsp;=&nbsp;[],</div></div><div class=\"1406\" style=\"display: none;\"><div style=\"display: table-cell;\"></div><div style=\"display: table-cell;\">css_classes&nbsp;=&nbsp;[],</div></div><div class=\"1406\" style=\"display: none;\"><div style=\"display: table-cell;\"></div><div style=\"display: table-cell;\">disabled&nbsp;=&nbsp;False,</div></div><div class=\"1406\" style=\"display: none;\"><div style=\"display: table-cell;\"></div><div style=\"display: table-cell;\">extra_x_ranges&nbsp;=&nbsp;{},</div></div><div class=\"1406\" style=\"display: none;\"><div style=\"display: table-cell;\"></div><div style=\"display: table-cell;\">extra_y_ranges&nbsp;=&nbsp;{},</div></div><div class=\"1406\" style=\"display: none;\"><div style=\"display: table-cell;\"></div><div style=\"display: table-cell;\">frame_height&nbsp;=&nbsp;None,</div></div><div class=\"1406\" style=\"display: none;\"><div style=\"display: table-cell;\"></div><div style=\"display: table-cell;\">frame_width&nbsp;=&nbsp;None,</div></div><div class=\"1406\" style=\"display: none;\"><div style=\"display: table-cell;\"></div><div style=\"display: table-cell;\">height&nbsp;=&nbsp;None,</div></div><div class=\"1406\" style=\"display: none;\"><div style=\"display: table-cell;\"></div><div style=\"display: table-cell;\">height_policy&nbsp;=&nbsp;'auto',</div></div><div class=\"1406\" style=\"display: none;\"><div style=\"display: table-cell;\"></div><div style=\"display: table-cell;\">hidpi&nbsp;=&nbsp;True,</div></div><div class=\"1406\" style=\"display: none;\"><div style=\"display: table-cell;\"></div><div style=\"display: table-cell;\">js_event_callbacks&nbsp;=&nbsp;{},</div></div><div class=\"1406\" style=\"display: none;\"><div style=\"display: table-cell;\"></div><div style=\"display: table-cell;\">js_property_callbacks&nbsp;=&nbsp;{},</div></div><div class=\"1406\" style=\"display: none;\"><div style=\"display: table-cell;\"></div><div style=\"display: table-cell;\">left&nbsp;=&nbsp;[LinearAxis(id='1312', ...)],</div></div><div class=\"1406\" style=\"display: none;\"><div style=\"display: table-cell;\"></div><div style=\"display: table-cell;\">lod_factor&nbsp;=&nbsp;10,</div></div><div class=\"1406\" style=\"display: none;\"><div style=\"display: table-cell;\"></div><div style=\"display: table-cell;\">lod_interval&nbsp;=&nbsp;300,</div></div><div class=\"1406\" style=\"display: none;\"><div style=\"display: table-cell;\"></div><div style=\"display: table-cell;\">lod_threshold&nbsp;=&nbsp;2000,</div></div><div class=\"1406\" style=\"display: none;\"><div style=\"display: table-cell;\"></div><div style=\"display: table-cell;\">lod_timeout&nbsp;=&nbsp;500,</div></div><div class=\"1406\" style=\"display: none;\"><div style=\"display: table-cell;\"></div><div style=\"display: table-cell;\">map_options&nbsp;=&nbsp;GMapOptions(id='1297', ...),</div></div><div class=\"1406\" style=\"display: none;\"><div style=\"display: table-cell;\"></div><div style=\"display: table-cell;\">margin&nbsp;=&nbsp;(0, 0, 0, 0),</div></div><div class=\"1406\" style=\"display: none;\"><div style=\"display: table-cell;\"></div><div style=\"display: table-cell;\">match_aspect&nbsp;=&nbsp;False,</div></div><div class=\"1406\" style=\"display: none;\"><div style=\"display: table-cell;\"></div><div style=\"display: table-cell;\">max_height&nbsp;=&nbsp;None,</div></div><div class=\"1406\" style=\"display: none;\"><div style=\"display: table-cell;\"></div><div style=\"display: table-cell;\">max_width&nbsp;=&nbsp;None,</div></div><div class=\"1406\" style=\"display: none;\"><div style=\"display: table-cell;\"></div><div style=\"display: table-cell;\">min_border&nbsp;=&nbsp;5,</div></div><div class=\"1406\" style=\"display: none;\"><div style=\"display: table-cell;\"></div><div style=\"display: table-cell;\">min_border_bottom&nbsp;=&nbsp;None,</div></div><div class=\"1406\" style=\"display: none;\"><div style=\"display: table-cell;\"></div><div style=\"display: table-cell;\">min_border_left&nbsp;=&nbsp;None,</div></div><div class=\"1406\" style=\"display: none;\"><div style=\"display: table-cell;\"></div><div style=\"display: table-cell;\">min_border_right&nbsp;=&nbsp;None,</div></div><div class=\"1406\" style=\"display: none;\"><div style=\"display: table-cell;\"></div><div style=\"display: table-cell;\">min_border_top&nbsp;=&nbsp;None,</div></div><div class=\"1406\" style=\"display: none;\"><div style=\"display: table-cell;\"></div><div style=\"display: table-cell;\">min_height&nbsp;=&nbsp;None,</div></div><div class=\"1406\" style=\"display: none;\"><div style=\"display: table-cell;\"></div><div style=\"display: table-cell;\">min_width&nbsp;=&nbsp;None,</div></div><div class=\"1406\" style=\"display: none;\"><div style=\"display: table-cell;\"></div><div style=\"display: table-cell;\">name&nbsp;=&nbsp;None,</div></div><div class=\"1406\" style=\"display: none;\"><div style=\"display: table-cell;\"></div><div style=\"display: table-cell;\">outline_line_alpha&nbsp;=&nbsp;1.0,</div></div><div class=\"1406\" style=\"display: none;\"><div style=\"display: table-cell;\"></div><div style=\"display: table-cell;\">outline_line_cap&nbsp;=&nbsp;'butt',</div></div><div class=\"1406\" style=\"display: none;\"><div style=\"display: table-cell;\"></div><div style=\"display: table-cell;\">outline_line_color&nbsp;=&nbsp;'#e5e5e5',</div></div><div class=\"1406\" style=\"display: none;\"><div style=\"display: table-cell;\"></div><div style=\"display: table-cell;\">outline_line_dash&nbsp;=&nbsp;[],</div></div><div class=\"1406\" style=\"display: none;\"><div style=\"display: table-cell;\"></div><div style=\"display: table-cell;\">outline_line_dash_offset&nbsp;=&nbsp;0,</div></div><div class=\"1406\" style=\"display: none;\"><div style=\"display: table-cell;\"></div><div style=\"display: table-cell;\">outline_line_join&nbsp;=&nbsp;'bevel',</div></div><div class=\"1406\" style=\"display: none;\"><div style=\"display: table-cell;\"></div><div style=\"display: table-cell;\">outline_line_width&nbsp;=&nbsp;1,</div></div><div class=\"1406\" style=\"display: none;\"><div style=\"display: table-cell;\"></div><div style=\"display: table-cell;\">output_backend&nbsp;=&nbsp;'canvas',</div></div><div class=\"1406\" style=\"display: none;\"><div style=\"display: table-cell;\"></div><div style=\"display: table-cell;\">plot_height&nbsp;=&nbsp;500,</div></div><div class=\"1406\" style=\"display: none;\"><div style=\"display: table-cell;\"></div><div style=\"display: table-cell;\">plot_width&nbsp;=&nbsp;600,</div></div><div class=\"1406\" style=\"display: none;\"><div style=\"display: table-cell;\"></div><div style=\"display: table-cell;\">renderers&nbsp;=&nbsp;[GlyphRenderer(id='1328', ...), GlyphRenderer(id='1333', ...)],</div></div><div class=\"1406\" style=\"display: none;\"><div style=\"display: table-cell;\"></div><div style=\"display: table-cell;\">reset_policy&nbsp;=&nbsp;'standard',</div></div><div class=\"1406\" style=\"display: none;\"><div style=\"display: table-cell;\"></div><div style=\"display: table-cell;\">right&nbsp;=&nbsp;[],</div></div><div class=\"1406\" style=\"display: none;\"><div style=\"display: table-cell;\"></div><div style=\"display: table-cell;\">sizing_mode&nbsp;=&nbsp;None,</div></div><div class=\"1406\" style=\"display: none;\"><div style=\"display: table-cell;\"></div><div style=\"display: table-cell;\">subscribed_events&nbsp;=&nbsp;[],</div></div><div class=\"1406\" style=\"display: none;\"><div style=\"display: table-cell;\"></div><div style=\"display: table-cell;\">tags&nbsp;=&nbsp;[],</div></div><div class=\"1406\" style=\"display: none;\"><div style=\"display: table-cell;\"></div><div style=\"display: table-cell;\">title&nbsp;=&nbsp;Title(id='1299', ...),</div></div><div class=\"1406\" style=\"display: none;\"><div style=\"display: table-cell;\"></div><div style=\"display: table-cell;\">title_location&nbsp;=&nbsp;'above',</div></div><div class=\"1406\" style=\"display: none;\"><div style=\"display: table-cell;\"></div><div style=\"display: table-cell;\">toolbar&nbsp;=&nbsp;Toolbar(id='1319', ...),</div></div><div class=\"1406\" style=\"display: none;\"><div style=\"display: table-cell;\"></div><div style=\"display: table-cell;\">toolbar_location&nbsp;=&nbsp;'right',</div></div><div class=\"1406\" style=\"display: none;\"><div style=\"display: table-cell;\"></div><div style=\"display: table-cell;\">toolbar_sticky&nbsp;=&nbsp;True,</div></div><div class=\"1406\" style=\"display: none;\"><div style=\"display: table-cell;\"></div><div style=\"display: table-cell;\">visible&nbsp;=&nbsp;True,</div></div><div class=\"1406\" style=\"display: none;\"><div style=\"display: table-cell;\"></div><div style=\"display: table-cell;\">width&nbsp;=&nbsp;None,</div></div><div class=\"1406\" style=\"display: none;\"><div style=\"display: table-cell;\"></div><div style=\"display: table-cell;\">width_policy&nbsp;=&nbsp;'auto',</div></div><div class=\"1406\" style=\"display: none;\"><div style=\"display: table-cell;\"></div><div style=\"display: table-cell;\">x_range&nbsp;=&nbsp;Range1d(id='1300', ...),</div></div><div class=\"1406\" style=\"display: none;\"><div style=\"display: table-cell;\"></div><div style=\"display: table-cell;\">x_scale&nbsp;=&nbsp;LinearScale(id='1357', ...),</div></div><div class=\"1406\" style=\"display: none;\"><div style=\"display: table-cell;\"></div><div style=\"display: table-cell;\">y_range&nbsp;=&nbsp;Range1d(id='1301', ...),</div></div><div class=\"1406\" style=\"display: none;\"><div style=\"display: table-cell;\"></div><div style=\"display: table-cell;\">y_scale&nbsp;=&nbsp;LinearScale(id='1358', ...))</div></div></div>\n",
       "<script>\n",
       "(function() {\n",
       "  var expanded = false;\n",
       "  var ellipsis = document.getElementById(\"1407\");\n",
       "  ellipsis.addEventListener(\"click\", function() {\n",
       "    var rows = document.getElementsByClassName(\"1406\");\n",
       "    for (var i = 0; i < rows.length; i++) {\n",
       "      var el = rows[i];\n",
       "      el.style.display = expanded ? \"none\" : \"table-row\";\n",
       "    }\n",
       "    ellipsis.innerHTML = expanded ? \"&hellip;)\" : \"&lsaquo;&lsaquo;&lsaquo;\";\n",
       "    expanded = !expanded;\n",
       "  });\n",
       "})();\n",
       "</script>\n"
      ],
      "text/plain": [
       "GMap(id='1298', ...)"
      ]
     },
     "execution_count": 53,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "principal()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "3. También debe poder planear viajes, dado un tiempo que\n",
    "quiere viajar, el sistema debe recomendar viajes usando como\n",
    "salida sus estaciones mas cercanas (o estaciones específicas\n",
    "seleccionadas por el usuario) y los destinos que le tomen mas\n",
    "o menos ese tiempo."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Bienvenido, ¿Tiene una cuenta? (escriba Si o No) Si\n",
      "Ingrese su id de usuario: 1\n",
      "Ingrese: \n",
      " 1. si desea agregar un nuevo lugar \n",
      " 2. si desea hacer una consulta \n",
      "2\n",
      "Ingrese: \n",
      " 1. para saber las estaciones cercanas a tus lugares \n",
      " 2. para planear un paseo \n",
      "2\n",
      "¿Cuántos minutos quieres que dure el paseo? 15\n",
      "¿Quieres que el viaje sea redondo? (Responde Si o No) No\n",
      "Salir desde: \n",
      " 1: una estación cercana a algún lugar pre-guardado \n",
      " 2: una estación en específico \n",
      "1\n",
      "¿Desde qué lugar? \n",
      "0 - casa\n",
      "1 - escuela\n",
      "2 - casa2\n",
      "1\n",
      "0 - 437 - 30, Macon St, Bedford-Stuyvesant\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "3f16190e94a24aafa8e05284ce94f9aa",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Figure(layout=FigureLayout(border='1px solid black', height='600px', padding='3px', width='400px'))"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "principal()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "4. El usuario debe poder dar la opción de que su viaje sea\n",
    "redondo (mismo punto de partida y salida). En este caso, solo\n",
    "se debe tomar en cuenta los datos que pasan por otras\n",
    "estaciones, a menos que el tiempo sea muy corto."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Bienvenido, ¿Tiene una cuenta? (escriba Si o No) Si\n",
      "Ingrese su id de usuario: 2\n",
      "Ingrese: \n",
      " 1. si desea agregar un nuevo lugar \n",
      " 2. si desea hacer una consulta \n",
      "2\n",
      "Ingrese: \n",
      " 1. para saber las estaciones cercanas a tus lugares \n",
      " 2. para planear un paseo \n",
      "2\n",
      "¿Cuántos minutos quieres que dure el paseo? 10\n",
      "¿Quieres que el viaje sea redondo? (Responde Si o No) Si\n",
      "Salir desde: \n",
      " 1: una estación cercana a algún lugar pre-guardado \n",
      " 2: una estación en específico \n",
      "2\n",
      "Ingresa el número de estación del que quieres salir 3002\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "6ae0fa50f2724394b81207e08fa0751f",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Figure(layout=FigureLayout(border='1px solid black', height='600px', padding='3px', width='400px'))"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "principal()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
